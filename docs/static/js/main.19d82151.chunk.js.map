{"version":3,"sources":["Types.ts","untyped-lambda-integration/AppTypes.ts","AppTypes.ts","components/MenuBar.tsx","markdown-integration/AppTypes.ts","components/CreateBox.tsx","components/Editor.tsx","untyped-lambda-integration/TreeComparator.ts","untyped-lambda-integration/EmptyExpression.tsx","misc/index.ts","untyped-lambda-integration/ReactPrinter.tsx","untyped-lambda-integration/ReductionMessage.tsx","untyped-lambda-integration/Step.tsx","untyped-lambda-integration/InactiveExpression.tsx","untyped-lambda-integration/Expression.tsx","untyped-lambda-integration/ExpressionBox.tsx","markdown-integration/Note.tsx","components/Box.tsx","untyped-lambda-integration/ExerciseSwitch.tsx","untyped-lambda-integration/BoxTopBar.tsx","markdown-integration/BoxTopBar.tsx","components/BoxTitleBar.tsx","components/BoxContainer.tsx","screens/Notebook.tsx","screens/Help.tsx","misc/UserGuide.ts","untyped-lambda-integration/Settings.tsx","screens/Settings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BoxType","Screen","PromptPlaceholder","EvaluationStrategy","CODE_NAME","defaultSettings","type","UNTYPED_LAMBDA","SLI","expandStandalones","strategy","NORMAL","ALL_BOX_TYPES","LISP","MARKDOWN","DEFAULT_WHITELIST","EmptyAppState","notebookList","boxList","activeBoxIndex","NaN","allowedBoxes","__key","Date","now","toString","settings","whitelist","UNTYPED_CODE_NAME","UntypedLambdaDefaultSettings","getDefaultSettings","currentNotebook","currentScreen","MAIN","loadSettingsFromStorage","serialized","window","localStorage","getItem","deserialized","JSON","parse","Object","entries","key","value","console","error","loadAppStateFromStorage","maybeState","setItem","stringify","state","map","notebook","box","index","arr","untypedLambdaBox","expression","decodedFirst","decodeUntypedLambdaFast","ast","history","step","iindex","decodedNth","reduction","lastReduction","undefined","decode","e","MenuBar","props","onScreenChange","onImport","onDeleteNotebook","onNotebookChange","log","link","content","data","Blob","URL","createObjectURL","createURL","id","className","length","onClick","onSelectNotebook","onAddNotebook","HELP","title","SETTINGS","href","download","accept","onChange","event","files","target","file","reader","FileReader","onload","result","readAsText","onFiles","htmlFor","isAllowed","anyBoxAllowed","includes","CreateBox","addNew","whiteList","untLSettings","isRunning","breakpoints","timeoutID","timeout","isExercise","editor","placeholder","caretPosition","syntaxError","allowed","addLispBoxIfAllowed","note","isEditing","addMDBoxIfAllowed","ActionType","TreeComparator","roots","translator","Map","equals","context","this","compare","left","right","Lambda","backup","set","argument","name","Application","Macro","ChurchNumeral","Variable","has","get","Editor","submitOnEnter","onContent","onEnter","onExecute","lines","split","InputField","selectionEnd","replace","onKeyDown","shiftKey","ctrlKey","preventDefault","wrap","autoComplete","autoCorrect","autoCapitalize","spellCheck","rows","Math","max","ref","element","selectionStart","focus","EmptyExpression","isActive","reportEvent","category","action","label","ga","getAll","send","exception","ReactPrinter","tree","rendered","visit","lambda","accumulator","body","isBreakpoint","Alpha","Array","from","conversions","some","conversion","identifier","args","Symbol","ASTReductionType","BETA","broken","Set","printMultiLambda","node","application","leftClassName","rightClassName","redex","Beta","Gama","acc","churchNumber","Expansion","EXPANSION","macro","redexes","redexClass","variable","ASTVisitor","ReductionMessage","ALPHA","GAMA","StepMemo","memo","stepRecord","addBreakpoint","children","message","strategyToEvaluator","nextReduction","printer","incorrectStep","indexOf","correctStep","exerciseStep","print","substr","lastStep","StepWrapper","InactiveExpression","Expression","bind","to","sequence","fn","i","mapLeftFromTo","addBox","createBoxFrom","isNormalForm","breakpoint","setBoxState","PureComponent","NormalEvaluator","APPLICATIVE","ApplicativeEvaluator","OPTIMISATION","OptimizeEvaluator","ABSTRACTION","NormalAbstractionEvaluator","ExpressionBox","onSubmitExpression","parseExpression","onExerciseStep","onStep","onRun","onStop","shouldBreak","EVAL_MODE","clone","None","userAst","normal","perform","VALIDATE_MODE","push","setTimeout","pop","find","add","clearTimeout","singleLetterVars","tokens","tokenize","lambdaLetters","ReactMarkdown","require","Note","source","Box","updateBoxState","Switch","ExerciseSwitch","makeExercise","endExercise","checked","shape","BoxTopBar","removeBox","contentEditable","onBlur","textContent","BoxTitleBar","BoxContainer","isActiveBox","makeActive","insertBefore","boxTypeClassName","mapBoxTypeToStr","onDoubleClick","Notebook","splice","updateNotebook","newIndex","Help","Radio","Settings","change","disabled","style","SettingsScreen","updateSettings","untypedSettings","unTypLSet","App","setScreen","changeNotebook","removeNotebook","setState","screen","Number","isNaN","newSettings","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.19d82151.chunk.js","sourcesContent":["import { UntypedLambdaState, UntypedLambdaSettings } from \"./untyped-lambda-integration/AppTypes\"\nimport { NoteState } from \"./markdown-integration/AppTypes\"\n\nexport enum BoxType {\n  UNTYPED_LAMBDA,\n  LISP,\n  MARKDOWN,\n}\n\nexport enum Screen {\n  MAIN,\n  HELP,\n  MACROLIST,\n  SETTINGS,\n  // NOTEBOOKS,\n}\n\nexport type AnyBox = -1\n\nexport type NoBox = -2\n\n// TODO: when building `Exam Mode`  allow only Array<BoxType> or NoBox\nexport type BoxesWhitelist = Array<BoxType> | AnyBox | NoBox\n\nexport interface AbstractBoxState {\n  type : BoxType,\n  __key : string, \n  title : String,\n}\n\nexport interface AbstractSettings {\n  type : BoxType,\n}\n\nexport interface LispBox extends AbstractBoxState {\n  // TODO: delete this placeholder and implement it\n}\n\nexport interface LispSettings extends AbstractSettings {\n  // TODO: delete this placeholder and implement it\n}\n\nexport type BoxState = UntypedLambdaState | LispBox | NoteState // or other things in the future\n\nexport type Settings = UntypedLambdaSettings | LispSettings // or other things in the future\n\n// TODO: this needs to be reconsidered\nexport interface GlobalSettings {\n  // [UNTYPED_CODE_NAME] : UntypedLambdaSettings\n  [key : string] : Settings\n}\n\nexport interface NotebookState {\n  boxList : Array<BoxState>,\n  activeBoxIndex : number,\n  allowedBoxes : BoxesWhitelist,\n\n  settings : GlobalSettings // TODO: refactor to use the Dictionary\n\n  __key : string\n}\n\nexport interface AppState {\n  notebookList : Array<NotebookState>,\n  currentNotebook : number,\n  currentScreen : Screen,\n}\n\n\n// TODO: move to specific integration\nexport interface MacroDefinitionState {\n  __key : string\n  type : BoxType\n  macroName : string\n  macroExpression : string\n  singleLetterNames : boolean\n  editor : {\n    placeholder : string\n    content : string\n    caretPosition : number\n    syntaxError : Error | null\n  }\n}\n\n\n\n","import { MacroMap, AST, ASTReduction, NormalEvaluator, ApplicativeEvaluator, OptimizeEvaluator, ASTReductionType } from \"@lambdulus/core\"\n\nimport { AbstractSettings } from '../Types'\nimport { BoxType, AbstractBoxState } from '../Types'\n\nexport const ADD_BOX_LABEL = '+λ'\n\nexport enum PromptPlaceholder {\n  INIT = 'Type λ (as \\\\) expression and hit enter',\n  EVAL_MODE = 'Hit enter for next step',\n  VALIDATE_MODE = 'Write next step and hit enter for validation',\n  MACRO = 'Define Macro like: `NAME := [λ expression]` and hit enter',\n  NOTE = 'Type note and hit shift enter'\n}\n\nexport type Breakpoint = {\n  type : ASTReductionType,\n  context : AST,\n  broken : Set<AST>,\n}\n\nexport interface StepRecord {\n  ast : AST\n  lastReduction : ASTReduction | null\n  step : number\n  message : string\n  isNormalForm : boolean\n}\n\nexport enum EvaluationStrategy {\n  NORMAL = 'Normal Evaluation',\n  APPLICATIVE = 'Applicative Evaluation',\n  OPTIMISATION = 'Optimisation - η Conversion',\n  ABSTRACTION = 'Abstraction / Simplified Evaluation'\n}\n\nexport interface UntypedLambdaState extends AbstractBoxState {\n  __key : string\n  type : BoxType\n  expression : string\n  ast : AST | null\n  history : Array<StepRecord>\n  isRunning : boolean\n  breakpoints : Array<Breakpoint>\n  timeoutID : number | undefined\n  timeout : number\n  isExercise : boolean\n  \n  strategy : EvaluationStrategy\n  SLI : boolean\n  expandStandalones : boolean\n  \n  editor : {\n    placeholder : string\n    content : string\n    caretPosition : number\n    syntaxError : Error | null\n  }\n}\n\nexport const CODE_NAME = 'UNTYPED_LAMBDA_CALCULUS'\n\nexport interface UntypedLambdaSettings extends AbstractSettings {\n  SLI : boolean\n  expandStandalones : boolean\n  strategy : EvaluationStrategy\n}\n\nexport const defaultSettings : UntypedLambdaSettings = {\n  type : BoxType.UNTYPED_LAMBDA,\n  SLI : false,\n  expandStandalones : false,\n  strategy : EvaluationStrategy.NORMAL\n}\n\nexport type Evaluator = NormalEvaluator | ApplicativeEvaluator | OptimizeEvaluator\n\n\nexport function createNewUntypedLambda (defaultSettings : UntypedLambdaSettings) : UntypedLambdaState {\n  return {\n    ...defaultSettings,\n    __key : Date.now().toString(),\n    title : \"\",\n    type : BoxType.UNTYPED_LAMBDA,\n    expression : \"\",\n    ast : null,\n    history : [],\n    isRunning : false,\n    breakpoints : [],\n    timeoutID : undefined,\n    timeout : 5,\n    isExercise : false,\n    \n    // strategy : EvaluationStrategy.NORMAL,\n    // singleLetterNames : false,\n    // standalones : false,\n    \n    editor : {\n      placeholder : \"placeholder\",\n      content : \"\",\n      caretPosition : 0,\n      syntaxError : null,\n    }\n  }\n}","import { UntypedLambdaState, CODE_NAME as UNTYPED_CODE_NAME, StepRecord } from \"./untyped-lambda-integration/AppTypes\"\nimport { defaultSettings as UntypedLambdaDefaultSettings } from './untyped-lambda-integration/AppTypes'\n\nimport { BoxType, Screen, BoxesWhitelist, AppState, GlobalSettings, NotebookState, BoxState } from \"./Types\"\nimport { AST, decodeFast as decodeUntypedLambdaFast, ASTReduction } from \"@lambdulus/core\"\n\n\n// TODO: when building `Exam Mode` simply leave only non-evaluative BoxTypes\nexport const ALL_BOX_TYPES : Array<BoxType> = [ BoxType.UNTYPED_LAMBDA, BoxType.LISP, BoxType.MARKDOWN ]\n\nexport const ANY_BOX = -1\n\nexport const NO_BOX = -2\n\nexport const DEFAULT_WHITELIST : BoxesWhitelist = ALL_BOX_TYPES\n\n\nexport function mapBoxTypeToStr (type : BoxType) : string {\n  switch (type) {\n    case BoxType.UNTYPED_LAMBDA:\n      return 'untypedLambdaBox'\n\n    case BoxType.MARKDOWN:\n      return 'markDownBox'\n    default:\n      return ''\n  }\n}\n\n\nexport const EmptyAppState : AppState = {\n  notebookList : [{\n    boxList : [],\n    activeBoxIndex : NaN,\n    allowedBoxes : ANY_BOX,\n    __key : Date.now().toString(),\n    settings : getDefaultSettings(DEFAULT_WHITELIST)\n  }],\n  currentNotebook : 0,\n  currentScreen : Screen.MAIN,\n}\n\n\nexport function updateSettingsInStorage (settings : GlobalSettings) : void {\n  window.localStorage.setItem('global-settings', JSON.stringify(settings))\n}\n\nexport function getDefaultSettings (whitelist : BoxesWhitelist) : GlobalSettings {\n  let defaultSettings = {}\n\n  if (whitelist === NO_BOX) {\n    whitelist = []\n  }\n  else if (whitelist === ANY_BOX) {\n    whitelist = ALL_BOX_TYPES\n  }\n\n  for (const type of whitelist) {\n    switch (type) {\n      case BoxType.UNTYPED_LAMBDA:\n        defaultSettings = {\n          ...defaultSettings,\n          [UNTYPED_CODE_NAME] : UntypedLambdaDefaultSettings,\n        }\n        break;\n    \n      default:\n        break;\n    }\n  }\n\n  return defaultSettings\n}\n\nexport function loadSettingsFromStorage () : GlobalSettings {\n  const defaultSettings = {\n    [UNTYPED_CODE_NAME] : {}\n  }\n\n  const serialized : string | null = window.localStorage.getItem('global-settings')\n  const deserialized : GlobalSettings =  serialized === null ? defaultSettings : JSON.parse(serialized)\n\n  \n  for (const [key, value] of Object.entries(deserialized)) {\n    switch (key) {\n      case UNTYPED_CODE_NAME:\n        deserialized[key] = { ...UntypedLambdaDefaultSettings, ...value }\n        break;\n    \n      default:\n        console.error(\"Settings CODE NAME is not one of known Code Names.\")\n        break;\n    }\n  }\n\n  return deserialized\n}\n\n\nexport function loadAppStateFromStorage () : AppState {\n  const maybeState : string | null = localStorage.getItem('AppState')\n\n  if (maybeState === null) {\n    localStorage.setItem('AppState', JSON.stringify(EmptyAppState))\n    return EmptyAppState\n  }\n  else {\n    try {\n      return decode(JSON.parse(maybeState))\n    }\n    catch (e) {\n      return EmptyAppState\n    }\n  }\n}\n\nexport function updateAppStateToStorage (state : AppState) : void {\n  localStorage.setItem('AppState', JSON.stringify(state))\n}\n\n// TODO: This function is going to be replaced with correct implementation of decoding\n// this slowly becomes better and better base for the final implementation\n/**\n * This function THROWS Error in case of invalid argument\n * @param state : Deserialized form of AppState\n */\nfunction decode (state : AppState) : AppState | never {\n  const notebookList : Array<NotebookState> = state.notebookList.map((notebook : NotebookState) => {\n    const boxList : Array<BoxState> = notebook.boxList.map((box : BoxState, index : number, arr : Array<BoxState>) => {\n      switch (box.type) {\n        case BoxType.UNTYPED_LAMBDA: {\n          const untypedLambdaBox : UntypedLambdaState = box as UntypedLambdaState\n\n          if (untypedLambdaBox.expression === '') {\n            return untypedLambdaBox\n          }\n          \n          const decodedFirst : AST | null = decodeUntypedLambdaFast(untypedLambdaBox.ast)\n\n          if (decodedFirst === null) {\n            // TODO: repair:\n            // parse expression\n            // replace untypedLambdaBox.ast with parsed AST\n            // for now - throw error\n            throw \"ROOT AST IS NOT DECODABLE\"\n          }\n\n          untypedLambdaBox.ast = decodedFirst\n          untypedLambdaBox.history = untypedLambdaBox.history.map((step : StepRecord, iindex : number) => {\n            let decodedNth : AST | null = decodeUntypedLambdaFast(step.ast) as AST\n\n            if (decodedNth === null) {\n              // TODO: repair:\n              // try to take previous Step.ast and do the evaluation\n              // though - remember this Step.step (number) may not be + 1 of the previous one\n              // you will need to do the steps as long as need to be\n              // replace decodedNth with parsed AST\n              // for throw\n              throw \"CURRENT STEP IS NOT DECODABLE \" + index\n            }\n\n            // TODO: maybe instead of this theatre just use the Core . Evalautor\n            // and get real instance of ASTReduction\n            let reduction : ASTReduction | undefined | null = step.lastReduction\n\n            if (step.lastReduction === undefined) {\n              reduction = null\n            }\n\n            return {\n              ...step,\n              lastReduction : reduction,\n              ast : decodedNth, // TODO: as AST this is unsafe\n            }\n          })\n\n          return untypedLambdaBox\n        }\n      \n        default:\n          return box\n      }\n    })\n\n    return {\n      ...notebook,\n      boxList,\n    }\n  })\n  \n  return {\n    ...state,\n    notebookList,\n  }\n}","import React, { ChangeEvent } from 'react'\nimport { AST, tokenize, parse, Token, MacroMap, None } from '@lambdulus/core'\n\nimport { ANY_BOX, loadSettingsFromStorage } from '../AppTypes'\nimport { BoxType, Screen, AppState, NotebookState } from '../Types'\n\n\nimport '../styles/MenuBar.css'\n// import { reportEvent } from '../misc'; // later\n\ninterface MenuBarProperties {\n  state : AppState\n  onImport (state : AppState) : void\n  onScreenChange (screen : Screen) : void\n  onNotebookChange (index : number) : void\n  onAddNotebook (notebook : NotebookState) : void\n  onSelectNotebook (index : number) : void\n  onDeleteNotebook (index : number) : void\n}\n\nexport default function MenuBar (props : MenuBarProperties) : JSX.Element {\n  const { state, onImport, onScreenChange, onNotebookChange, onDeleteNotebook } : MenuBarProperties = props\n  const { notebookList, currentNotebook } = state\n\n  console.log('current notebook ', currentNotebook)\n  const { currentScreen } = state\n\n  // const dehydrated : object = dehydrate(state)\n\n  const serialized : string = JSON.stringify(state)\n  const link : string = createURL(serialized)\n\n  return (\n    <div id=\"menu-bar\">\n      <ul className='notebooks UL'>\n        {\n          notebookList.map(\n            (notebook : NotebookState, index : number) =>\n            <li className={ `LI${ currentNotebook === index ? ' current' : '' }` } key={ notebook.__key }>\n              <div className='notebookIconWrapper'>\n                {\n                  notebookList.length === 1 ?\n                  null\n                  :\n                  <i className=\"removeNtb far fa-times-circle\" onClick={ () => onDeleteNotebook(index) } />\n                }\n                <div className='notebookIcon' onClick={ () => props.onSelectNotebook(index) }>\n                  { index }\n                </div>\n              </div>\n            </li>\n          )\n        }\n        <div className='addNotebook' onClick={ () => props.onAddNotebook(createNewNotebook()) } >\n          +\n        </div>\n      </ul>\n\n      {\n        currentScreen === Screen.HELP ?\n        <div title='Back to Notebook'>\n          <i\n            className=\"icon far fa-window-close fa-2x\"\n            onClick={ () => onScreenChange(Screen.MAIN) } />\n          <p className='iconLabel'>Notebook</p>\n        </div>\n          :\n        <div title='Show help'>\n          <i\n            className=\"icon far fa-question-circle fa-2x\"\n            onClick={ () => onScreenChange(Screen.HELP) }\n          />\n          <p className='iconLabel'>Help</p>\n        </div>\n      }\n\n      {\n        currentScreen === Screen.SETTINGS ?\n        <div title='Back to Notebook'>\n          <i\n            className=\"icon far fa-window-close fa-2x\"\n            onClick={ () => onScreenChange(Screen.MAIN) } />\n          <p className='iconLabel'>Notebook</p>\n        </div>\n          :\n        <div title='Go to Settings'>\n          <i\n            className=\"icon fas fa-cogs fa-2x\"\n            onClick={ () => onScreenChange(Screen.SETTINGS) }\n          />\n          <p className='iconLabel'>Settings</p>\n        </div>\n      }\n\n      {/* <div title='List all defined macros' >\n        {\n          screen === Screen.main ?\n            <i className=\"icon fas fa-list-ul fa-2x\" onClick={ () => onScreenChange(Screen.macrolist) } />\n            :\n            screen === Screen.macrolist ?\n              <i className=\"icon far fa-window-close fa-2x\" onClick={ () => onScreenChange(Screen.main) } />\n              :\n              <i className=\"icon fas fa-list-ul fa-2x\" onClick={ () => onScreenChange(Screen.macrolist) } />\n        }\n        <p className='iconLabel'>Macros</p>\n      </div>         */}\n        \n      <div title='Download this notebook'>\n        <a\n          className='export'\n          href={ link }\n          download=\"notebook_lambdulus.json\"\n          // onClick={ () => setTimeout(() => {\n          //   window.URL.revokeObjectURL(link)\n          //   reportEvent('Export notebook', `Notebook: ${serialized}`, '')\n          // }, 10) }\n        >\n          <i id='download' className=\"icon fas fa-cloud-download-alt fa-2x\" />\n        </a>\n        <p className='iconLabel'>Export</p>\n      </div>\n      \n      <div title='Open exported notebook'>\n        <input type=\"file\" accept=\"application/json\" id=\"input\" onChange={ (e) => onFiles(e, onImport) } />\n        <label htmlFor=\"input\"><i className=\"icon fas fa-cloud-upload-alt fa-2x\"></i></label>\n        <p className='iconLabel'>Import</p>\n      </div>\n\n      <div title='Report a bug or request new feature'>\n        <a href='https://github.com/lambdulus/new-frontend/issues' target=\"_blank\">\n          <i className=\"icon fas fa-bug fa-2x\"></i>\n        </a>\n        <p className='iconLabel'>Issues</p>\n      </div>\n    </div>\n  )\n}\n\n// function dehydrateBox (box : BoxState) : BoxState {\n//   const { type } : BoxState = box\n\n//   if (type === BoxType.EXPRESSION) {\n\n//     return {\n//       ...box,\n//       ast : null as any, // TODO: don't\n//       history : [], // TODO: don't\n//       isRunning : false,\n//       breakpoints : [], // TODO: solve how to don't\n//       timeoutID : undefined,\n//     }\n//   }\n\n//   return box\n// }\n\n// function dehydrate (state : AppState) : AppState {\n//   return {\n//     ...state,\n//     submittedBoxes : state.submittedBoxes.map(dehydrateBox)\n//   }\n// }\n\n// function hydrateBox (box : BoxState, macroTable : MacroMap) : BoxState {\n//   const { type } : BoxState = box\n  \n//   if (type === BoxType.EXPRESSION) {\n//     const { singleLetterNames } = box as UntypedLambdaState\n//     const ast : AST = parseExpression((box as UntypedLambdaState).expression, { macroTable, singleLetterNames })\n\n//     return {\n//       ...box,\n//       ast,\n//       history : [ { ast, lastReduction : None, step : 0, message : '', isNormalForm : false } ],\n//     }\n//   }\n\n//   return box\n// }\n\n// function hydrate (dehydrated : AppState) : AppState {\n//   const { macroTable } = dehydrated\n//   const config = { macroTable }\n\n//   return {\n//     ...dehydrated,\n//     submittedBoxes : dehydrated.submittedBoxes.map((box) => hydrateBox(box, macroTable))\n//   }\n// }\n\n// interface Config {\n//   singleLetterNames : boolean\n//   macroTable : MacroMap\n// }\n\n// function parseExpression (expression : string, config : Config) : AST {\n//   const { singleLetterNames : singleLetterVars, macroTable } : Config = config\n  \n//   const tokens : Array<Token> = tokenize(expression, { lambdaLetters : ['λ'], singleLetterVars })\n//   const ast : AST = parse(tokens, macroTable)\n\n//   return ast\n// }\n\nfunction createNewNotebook () : NotebookState {\n  return {\n    boxList : [],\n    activeBoxIndex : NaN,\n    allowedBoxes : ANY_BOX,\n    __key : Date.now().toString(),\n    settings : loadSettingsFromStorage()\n  }\n}\n\nfunction onFiles (event : ChangeEvent<HTMLInputElement>, onImport : (state : AppState) => void) : void {\n  const { target : { files } } = event\n  if (files === null) {\n    return\n  }\n\n  const file : File = files[0]\n  const reader : FileReader = new FileReader\n  reader.onload = (event : Event) => {\n    const state : AppState = JSON.parse(reader.result as string)\n\n    // onImport(hydrate(state))\n    // reportEvent('Import notebook', `Notebook named ${ file.name }`, '')\n  }\n\n  reader.readAsText(file) \n}\n\nfunction createURL (content : string) : string {\n  const data = new Blob([ content ], {\n    type: 'application/json'\n  })\n\n  return window.URL.createObjectURL(data);\n}","import { BoxType, AbstractBoxState } from \"../Types\"\n\n\nexport interface NoteState extends AbstractBoxState {\n  __key : string\n  type : BoxType\n  note : string\n  isEditing : boolean\n  editor : {\n    placeholder : string\n    content : string\n    caretPosition : number\n    syntaxError : Error | null\n  }\n}\n\nexport function createNewMarkdown () : NoteState {\n  return {\n    __key : Date.now().toString(),\n    type : BoxType.MARKDOWN,\n    title : 'Click Here to Change the Title',\n    note : '',\n    isEditing : true,\n    editor : {\n      placeholder : PromptPlaceholder,\n      content : '',\n      caretPosition : 0,\n      syntaxError : null\n    }\n  }\n}\n\nexport const PromptPlaceholder : string = 'Note in MarkDown'\n\nexport function onMarkDownBlur (state : NoteState) : NoteState {\n  return {\n    ...state,\n    isEditing: false,\n  }\n}","import React from 'react'\n\nimport { ANY_BOX, NO_BOX } from '../AppTypes'\nimport { BoxType, BoxesWhitelist, BoxState, GlobalSettings } from '../Types'\nimport { createNewUntypedLambda, ADD_BOX_LABEL, UntypedLambdaSettings, CODE_NAME as UNTYPED_CODE_NAME, UntypedLambdaState } from '../untyped-lambda-integration/AppTypes'\nimport { createNewMarkdown } from '../markdown-integration/AppTypes'\n\n\ninterface Props {\n  addNew : (box : BoxState) => void,\n  whiteList : BoxesWhitelist,\n  settings : GlobalSettings\n}\n\nfunction anyBoxAllowed (whitelist : BoxesWhitelist) : boolean {\n  return whitelist === ANY_BOX\n}\n\nfunction noBoxAllowed (whitelist : BoxesWhitelist) : boolean {\n  return whitelist === NO_BOX\n}\n\nfunction isAllowed (type : BoxType, whitelist : BoxesWhitelist) : boolean {\n  console.log(whitelist)\n  return anyBoxAllowed(whitelist) || (whitelist as Array<BoxType>).includes(type)\n}\n\nexport function CreateBox (props : Props) : JSX.Element {\n  const { addNew, whiteList, settings } : Props = props\n\n  const untLSettings : UntypedLambdaSettings = settings[UNTYPED_CODE_NAME] as UntypedLambdaState\n\n  const addLambdaBoxIfAllowed = (allowed : boolean) => (\n    allowed ?\n      <p\n        className='plusBtn'\n        title='Create new λ box'\n        onClick={ () => props.addNew(createNewUntypedLambda(untLSettings)) } // TODO: some imported function from the Integration -- like Integration.CreateNewBox()\n      >\n        <i>{ ADD_BOX_LABEL }</i>\n      </p>\n      :\n      null\n  )\n\n  const addLispBoxIfAllowed = (allowed : boolean) => (\n    allowed ?\n      <p\n        className='plusBtn'\n        title='Create new Lisp box'\n        onClick={ () => props.addNew({} as BoxState) }\n      >\n        <i>+ Lisp</i>\n      </p>\n      :\n      null\n  )\n\n  const addMDBoxIfAllowed = (allowed : boolean) => (\n    allowed ?\n    <p\n      className='plusBtn'\n      title='Create new MarkDown box'\n      onClick={ () => props.addNew(createNewMarkdown()) }\n    >\n      <i>+ MD</i>\n    </p>\n    :\n    null\n  )\n\n  return (\n    noBoxAllowed(whiteList) ?\n      null as any\n      :\n      <div className='addBoxArea'>\n        <div className='addButtons'>\n          { addLambdaBoxIfAllowed(isAllowed (BoxType.UNTYPED_LAMBDA, whiteList)) }\n          { addLispBoxIfAllowed(isAllowed(BoxType.LISP, whiteList)) }\n          { addMDBoxIfAllowed(isAllowed(BoxType.MARKDOWN, whiteList)) }\n        </div>\n      </div>\n  )\n}\n","import React, { ChangeEvent, KeyboardEvent } from 'react'\n\nimport '../styles/Editor.css'\n\n// import { EvaluationStrategy } from '../App'\n\n\nexport enum ActionType {\n  ENTER_EXPRESSION = 'Enter Expression',\n  ENTER_EXERCISE = 'Enter Exercise',\n  NEXT_STEP = 'Next Step',\n  RUN = 'Run',\n  ENTER_MD = 'Enter MarkDown',\n}\n\ninterface EditorProperties {\n  placeholder: string\n  content : string\n  caretPosition : number\n  syntaxError : Error | null\n  submitOnEnter : boolean\n  \n  onContent (content : string, caretPosition : number) : void\n  onEnter () : void\n  onExecute () : void\n  // onReset () : void\n}\n\nexport default function Editor (props : EditorProperties) : JSX.Element {\n  const {\n    placeholder,\n    content,\n    caretPosition,\n    syntaxError,\n    submitOnEnter,\n\n    onContent,\n    onEnter,\n    onExecute,\n  } : EditorProperties = props\n  const lines : number = content.split('\\n').length\n\n  const onChange = (event : ChangeEvent<HTMLTextAreaElement>) => {\n    let { target : { value : content } } : { target : { value : string } } = event\n    const caretPosition : number = event.target.selectionEnd\n\n    content = content.replace(/\\\\/g, 'λ')\n\n    onContent(content, caretPosition)\n  }\n\n  // TODO: Editor should not decide that - it should only implement onEnter onShiftEnter onCtrlEnter\n  const onKeyDown = (event : KeyboardEvent<HTMLTextAreaElement>) => {\n    if ( ! event.shiftKey && ! event.ctrlKey && event.key === 'Enter') {\n      \n      if (submitOnEnter) {\n        event.preventDefault()\n        onEnter()\n      }\n\n      return\n    }\n\n    // if (event.shiftKey && event.key === 'Enter' && isMarkDown) {\n    //   event.preventDefault()\n    //   onEnter()\n    // }\n    if (event.ctrlKey && event.key === 'Enter') {\n      event.preventDefault()\n      onExecute()\n    }\n\n    // TODO: not yet\n    // if (event.ctrlKey && event.key === 'r') {\n    //   event.preventDefault()\n    //   onReset()\n    // }\n  }\n\n  return (\n    <div className='editorContainer'>\n      {\n        syntaxError ?\n        <p className='editorError'>\n          { `${syntaxError}` }\n        </p>\n        :\n        null\n      }\n\n      <div className=\"editor\">\n        <InputField\n          placeholder={ placeholder }\n          content={ content }\n          lines={ lines }\n          caretPosition={ caretPosition }\n          onChange={ onChange }\n          onKeyDown={ onKeyDown }\n        />\n      </div>\n    </div>\n  )\n}\n\ninterface InputProps {\n  placeholder : string\n  content : string\n  lines : number\n  caretPosition : number\n  onChange (event : ChangeEvent<HTMLTextAreaElement>) : void\n  onKeyDown (event : KeyboardEvent<HTMLTextAreaElement>) : void\n}\n\nfunction InputField (props : InputProps) : JSX.Element {\n  const { placeholder, content, lines, onChange, onKeyDown, caretPosition } : InputProps = props\n\n  return (\n    <textarea\n      className='prompt'\n      onKeyDown={ onKeyDown }\n      onChange={ onChange }\n      value={ content }\n      placeholder={ placeholder }\n      wrap='hard'\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      autoCapitalize=\"off\"\n      spellCheck={ false }\n      rows={ Math.max(lines, 1) } \n      ref={ (element : HTMLTextAreaElement) => {\n        if (element !== null) {\n          element.selectionStart = caretPosition\n          element.selectionEnd = caretPosition\n          element.focus()\n        }\n      } }\n    />\n  )\n}","import { AST, Lambda, Application, Macro, ChurchNumeral, Variable } from \"@lambdulus/core\"\n\n///////////////////////////////////////////////////////////////////////////////////////\n\ntype Pair<T> = [T, T]\ntype Triple<T> = [T, T, T]\n\n\n// TODO: fix the public equals interface, maybe public get and private set?\n// maybe implement public get method and bool itself leave private?\n//\n// first I need more trees, I need the previous AST\nexport class TreeComparator {\n  private translator : Map<string, string> = new Map\n  public equals : boolean = true\n  private context : Pair<AST>\n\n  constructor (readonly roots : Pair<AST> ) {\n    [ ...this.context ] = roots\n    // TODO: I need to compare roots first\n    this.compare()\n  }\n\n  compare () : void {\n    /**\n    TODO: compare need to compare both children if got\n    if one of them is incorrect\n    then solve that problem\n    if both of them is incorrect\n    then solve both problems and then decide how both come together\n\n    then I have an instance of knowledge system\n    I can fire up that system in this context (this node with invalid children)\n    system will need to get instance of something to call methods on\n    because system needs to ask questions - like, is this possible,\n    is this error applicable?\n    so instead of human, code will look up the AST and answer the questions\n    so it will be some kind of class which is able to observe all 3 ASTs at the same time\n    it will also have implemented query methods,\n    probably wont be many of them, just few\n    **/\n    \n    const [ left, right ] : Pair<AST> = this.context\n\n    if (left instanceof Lambda && right instanceof Lambda) {\n      const backup : Map<string, string> = new Map(this.translator.entries())\n\n      this.translator.set(left.argument.name(), right.argument.name())\n      this.context = [ left.right, right.right ]\n      this.compare()\n\n      this.translator = backup\n    }\n    else if (left instanceof Application && right instanceof Application) {\n      this.context = [ left.left, right.left ]\n      this.compare()\n\n      if ( ! this.equals) {\n        return\n      }\n\n      this.context = [ left.right, right.right ]\n      this.compare()\n    }\n    else if (left instanceof Macro && right instanceof Macro) {\n      this.equals = left.name() === right.name()\n    }\n    else if (left instanceof ChurchNumeral && right instanceof ChurchNumeral) {\n      this.equals = left.name() === right.name()\n    }\n    else if (left instanceof Variable && right instanceof Variable) {\n      if (this.translator.has(left.name())) {\n        this.equals = this.translator.get(left.name()) === right.name()\n      }\n      else {\n        this.equals = left.name() === right.name()\n      }\n    }\n    else {\n      this.equals = false\n    }\n  }\n}","import React, { useContext, ReactNode } from 'react'\n\nimport Editor from '../components/Editor'\n// import { MakeActiveContext, DeleteBox } from './BoxSpace'\nimport { StepRecord } from './AppTypes'\n\ninterface EmptyExpressionProps {\n  className : string\n  isActive : boolean\n  editor : {\n    placeholder : string\n    content : string\n    caretPosition : number\n    syntaxError : Error | null\n  }\n  history : Array<StepRecord>\n\n  onContent (content : string, caretPosition : number) : void\n  onEnter () : void\n  onExecute () : void\n}\n\n\nexport default function EmptyExpression(props : EmptyExpressionProps) : JSX.Element{\n  const { className, isActive, editor } = props\n  const {\n    placeholder,\n    content,\n    caretPosition,\n    syntaxError,\n  } = editor\n\n  // const makeActive = useContext(MakeActiveContext)\n  // const deleteBox = useContext(DeleteBox)\n\n  return (\n    <div\n      className={ `${className} ${isActive ? '' : ' inactiveBox'}` }\n    >\n      {\n        isActive ?\n          (\n            <div>\n              <Editor\n                placeholder={ placeholder } // data\n                content={ content } // data\n                caretPosition={ caretPosition } // data\n                syntaxError={ syntaxError } // data\n                submitOnEnter={ true } // data\n\n                onContent={ props.onContent } // fn\n                onEnter={ props.onEnter } // fn // tohle asi bude potreba\n                onExecute={ props.onExecute } // fn // tohle asi bude potreba\n              />\n            </div>\n          )\n          :\n          (\n            <div>\n              <p className='inactiveMessage'>\n                Collapsing { Math.max(0, props.history.length - 1) } { props.history.length === 2 ? 'step' : 'steps' }. Double click to activate this box.\n              </p>\n              </div>\n          )\n      }\n    </div>\n  )\n}","import { MacroMap } from \"@lambdulus/core\"\n\n\nexport function debounce (fn : Function, treshold : number)\n : [ (...args : Array<any>) => void, () => void ] {\n  let timer : number\n  \n  return [\n    function debounced (...args : Array<any>) : void {\n      window.clearTimeout(timer)\n\n      timer = window.setTimeout(() => {\n        fn(...args)\n      }, treshold)\n    },\n    function cancel () : void {\n      window.clearTimeout(timer)\n    }\n  ]\n}\n\n// export function getSavedMacros () : MacroMap {\n//   return JSON.parse(window.localStorage.getItem('macrotable') || '{}')\n// }\n\nexport function trimStr (str : string) : string {\n  return str.trim()\n}\n\nexport function mapLeftFromTo(\n  from : number,\n  to : number,\n  sequence : Array<any>,\n  fn : (...args : Array<any>) => any) {\n    const result : Array<any> = new Array(to - from + 1)\n\n    for (let e = 0, i = from; i <= to; ++i) {\n      result[e++] = fn(sequence[i], i)\n    }\n\n    return result\n  }\n\n// export const HANDY_MACROS : MacroMap = {\n//   // 'Y' : '(λ f . (λ x . f (x x)) (λ x . f (x x)))',\n//   // 'Z' : '(λ f . (λ y . f (λ z . y y z)) (λ y . f (λ z . y y z)))',\n//   // FACT : '(Y (λ f n . (<= n 1) 1 (* n (f (- n 1)))))',\n//   // FACCT : '(λ n . (Y (λ f n a . IF (= n 1) a (f (- n 1) (* n a)))) (- n 1) (n))',\n//   // FIB : '(Y (λ f n . (= n 0) 0 ((= n 1) 1 ( + (f (- n 1)) (f (- n 2))))))',\n//   // // SHORTLIST : 'CON 3 (CONS 5 (CONS 1 NIL))',\n//   // // LONGLIST :  '(CONS 3 (CONS 5 (CONS 1 (CONS 10 (CONS 7 (CONS 2 (CONS 4 (CONS 9 (CONS 4 (CONS 6 (CONS 8 NIL)))))))))))',\n//   // APPEND : 'Y (λ fn listA listB . IF (NULL listA) (listB) (CONS (FIRST listA) (fn (SECOND listA) listB)))',\n//   // LISTGREQ : 'Y (λ fn piv list . IF (NULL list) (NIL) ( IF (>= (FIRST list) piv) (CONS (FIRST list) (fn piv (SECOND list))) (fn piv (SECOND list)) ) )',\n//   // LISTLESS : 'Y (λ fn piv list . IF (NULL list) (NIL) ( IF (< (FIRST list) piv) (CONS (FIRST list) (fn piv (SECOND list))) (fn piv (SECOND list)) ) )',\n//   // LISTGR : 'Y (λ fn piv list . IF (NULL list) (NIL) ( IF (> (FIRST list) piv) (CONS (FIRST list) (fn piv (SECOND list))) (fn piv (SECOND list)) ) )',\n//   // LISTEQ : 'Y (λ fn piv list . IF (NULL list) (NIL) ( IF (= (FIRST list) piv) (CONS (FIRST list) (fn piv (SECOND list))) (fn piv (SECOND list)) ) )',\n//   // QUICKSORT : 'Y (λ fn list . IF (NULL list) (NIL) ( IF (NULL (SECOND list)) (list) ( APPEND (fn (LISTLESS (FIRST list) list)) ( APPEND (LISTEQ (FIRST list) list) (fn (LISTGR (FIRST list) list)) ) ) ) )',\n//   // INFLIST : '(λ n . (Y (λ x . (λ f s g . g f s) n x)))',\n//   // REMOVENTH : 'Y (λ fn list n . IF (= n 0) (SECOND list) (IF (NULL list) NIL (CONS (FIRST list) (fn (SECOND list) (- n 1) ) ) ) )',\n//   // NTH : 'Y (λ fn list n . IF (= n 0) (FIRST list) (IF (NULL (list)) NIL (fn (SECOND list) (- n 1)) ) )',\n//   // LEN : 'Y (λ fn list . IF (NULL list) (0) (+ 1 (fn (SECOND list) )) )',\n//   // GETNTH : '(λ end . (Y (λ f n i . (end i) (i) ( (= n 0) (Y (λ f a . (end a) (i) (f) ) ) (f (- n 1)) ) )) )',\n//   // MAP : '(λ fn l . (Y (λ f it . IF (NULL it) (NIL) (CONS (fn (FIRST it)) (f (SECOND it))) )) l )',\n//   // REDUCE : '(λ fn l init . Y (λ f it acc . IF (NULL it) (acc) (f (SECOND it) (fn (FIRST it) acc)) ) l init )',\n//   // APPLY : '(λ f args . Y (λ ff f l . (NULL l) (f) (ff (f (FIRST l)) (SECOND l)) ) f args )',\n//   // RANGE : '(λ m n . Y (λ f e . (= e n) (CONS e NIL) (CONS e (f (+ e 1))) ) m )',\n//   // LISTCOMPR : '(λ args . APPLY (λ op in rng cond . Y (λ f l . (NULL l) (NIL) ( (cond (FIRST l)) (CONS (op (FIRST l)) (f (SECOND l))) (CONS (FIRST l) (f (SECOND l))) ) ) rng ) args )',\n//   // MOD : '(λ n m . (n (λ n . (= n (- m 1)) (0) (+ n 1)) (0)) )',\n//   // INFIX : 'APPLY (λ l op r . op l r)',\n// }\n\n// export function updateMacros (macroTable : MacroMap) : void {\n//   window.localStorage.setItem('macrotable', JSON.stringify(macroTable))\n// }\n\nexport function reportEvent (category : string, action : string, label : string) : void {\n  try {\n    const tracker = (window as any).ga.getAll()[0]\n    \n    tracker.send('event', category, action, label )\n  }\n  catch (exception) {\n    // instead of printing to the console - show notification on the web\n    console.log(\"\")\n    console.log('PLEASE DISABLE YOUR ADBLOCKER OR ALLOW GOOGLE ANALYTICS FOR THIS SITE')\n    console.log(\"\")\n    console.error(exception)\n  }\n}","import React from 'react'\n\nimport { ASTVisitor, Lambda, Variable, Beta, AST, Application, ChurchNumeral, Expansion, Macro, ASTReduction, Alpha, Gama, ASTReductionType } from \"@lambdulus/core\"\nimport { Breakpoint } from './AppTypes'\nimport { reportEvent } from '../misc';\n\n\nexport default class ReactPrinter extends ASTVisitor {\n  private rendered : JSX.Element | null = null\n  private argument : Variable | null = null\n\n  private printMultiLambda (lambda : Lambda, accumulator : JSX.Element) : void {\n    if (lambda.body instanceof Lambda) {\n      const context : Variable = lambda.body.argument\n      let className : string = 'argument'\n      let title : string = ''\n\n      if (this.isBreakpoint(lambda.body.argument)) {\n        className += ' breakpoint'\n        title = 'Will break on substitution'\n      }\n\n      // bug@highlight-alpha\n      let set = false\n      if (this.reduction instanceof Alpha\n            &&\n          Array.from(this.reduction.conversions).some((conversion : Lambda) => {\n            return conversion.identifier === lambda.body.identifier\n          })\n          ) {\n              this.argument = context\n              set = true\n              className += ' alpha'\n      }\n\n      // TO JE KVULI FIXU MULTILAMBDA FACCT 3 beta redukce nad shadowingem\n      let argument : Variable | null = this.argument\n      if (this.argument !== lambda.body.argument\n          &&\n          this.argument !== null\n          &&\n          this.argument.name() === lambda.body.argument.name()) {\n        this.argument = null\n      } // TO JE KVULI FIXU MULTILAMBDA FACCT 3 beta redukce nad shadowingem\n\n      // TODO: same here\n      if (this.argument\n          &&\n          this.argument.name() === context.name()) {\n            className += ' substitutedArg'\n        }\n\n      const args : JSX.Element = (\n        <span className='arguments'>\n          { accumulator } {' '}\n          <span\n            className={ className }\n            title={ title }\n            onClick={ () => {\n              (context as any).identifier = Symbol()\n              this.onClick({ type : ASTReductionType.BETA, context, broken : new Set })\n              reportEvent('Breakpoint added to argument', 'Breakpoint was added', '')\n            }\n            }\n          >\n            { context.name() }\n          </span>\n        </span>\n      )\n      \n      this.printMultiLambda(lambda.body, args)\n      if (set === true) {\n        this.argument = null\n      }\n      this.argument = argument // TO JE KVULI FIXU MULTILAMBDA FACCT 3 beta redukce nad shadowingem\n    }\n    else {\n      lambda.body.visit(this)\n      const body : JSX.Element | null = this.rendered\n      this.rendered = accumulator\n\n      this.rendered = (\n        <span className='function'>\n          (\n          <span\n            className='lambda'\n            >\n              λ { ' ' }\n          </span>\n          { accumulator } . { body }\n          )\n        </span>\n      )\n    }\n  }\n\n  isBreakpoint (node : AST) : boolean {\n    for (const breakpoint of this.breakpoints) {\n      if (breakpoint.context.identifier === node.identifier) {\n        return true\n      }\n    }\n    return false\n  }\n\n  constructor (\n    public readonly tree : AST,\n    private readonly onClick : (breakpoint : Breakpoint) => void,\n    private readonly reduction : ASTReduction,\n    private readonly breakpoints : Array<Breakpoint>,\n  ) {\n    super()\n    this.tree.visit(this)\n  }\n\n  print () : JSX.Element | null {\n    return this.rendered\n  }\n\n  // TODO: little bit refactored, maybe keep going\n  onApplication (application: Application) : void {\n    let className : string = 'application'\n    let leftClassName : string = 'left'\n    let rightClassName : string = 'right'\n    let set : boolean = false\n    let redex : AST | null = null\n\n    if (this.reduction instanceof Beta) {\n      redex = this.reduction.redex\n    }\n\n    if (this.reduction instanceof Gama && this.reduction.args.includes(application)) {\n      className += ' redex abstraction argument'\n    }\n    // else if (this.reduction instanceof Expansion) {\n    //   redex = this.reduction.target\n    // } // to asi neni uplne potreba tady\n\n    if (redex !== null\n          &&\n        redex.identifier === application.identifier // tohle je asi trosku useles\n          &&\n        redex === application\n      ) {\n        leftClassName += ' redex'\n        rightClassName += ' redex'\n\n        // TODO: this is probably not good and should be done other way\n\n        if (application.left instanceof Lambda) {\n          this.argument = application.left.argument\n          set = true\n        }\n    }\n\n    if (application.right instanceof Application) {\n      application.left.visit(this)\n      const left : JSX.Element | null = <span className={ leftClassName }>{this.rendered}</span>\n\n      // tohle delam proto, ze se nesmi vypnout this.argument u libovolne aplikace, jenom u te ktera ho setnula\n      // priklad + 2 3 a krokuj - zakomentuj a krokuj znovu Y se bude chovat spatne hned v prvnich krocich\n      if (set) {\n        this.argument = null\n      }\n\n      application.right.visit(this)\n      const right : JSX.Element | null = <span className={ rightClassName }>( { this.rendered } )</span>\n\n      this.rendered =\n      <span className={ className }>\n        { left } { right }\n      </span>\n    }\n    else {\n      application.left.visit(this)\n      const left : JSX.Element | null = <span className={ leftClassName }>{this.rendered}</span>\n\n      // tohle delam proto, ze se nesmi vypnout this.argument u libovolne aplikace, jenom u te ktera ho setnula\n      // priklad + 2 3a krokuj - zakomentuj a krokuj znovu Y se bude chovat spatne hned v prvnich krocich\n      if (set) {\n        this.argument = null\n      }\n\n      application.right.visit(this)\n      const right : JSX.Element | null = <span className={ rightClassName }>{ this.rendered }</span>\n\n      this.rendered =\n      <span className={ className }>\n        { left } { right }\n      </span>\n    }\n  }\n  \n  // TODO: little bit refactored, maybe keep going\n  onLambda (lambda: Lambda) : void {\n    // TODO: this also seems not so elegant and clean\n\n    let title : string = ''\n\n    let argument : Variable | null = this.argument\n    if (this.argument !== lambda.argument\n        &&\n        this.argument !== null\n        &&\n        this.argument.name() === lambda.argument.name()) {\n      this.argument = null\n    }\n\n\n    // multilambda\n    if (lambda.body instanceof Lambda) {\n      const context : Variable = lambda.argument\n      let className : string = 'argument'\n\n      if (this.isBreakpoint(lambda.argument)) {\n        className += ' breakpoint'\n        title = 'Will break on substitution'\n      }\n\n      // TODO: same here\n      if (this.argument\n        &&\n        this.argument.name() === context.name()) {\n          className += ' substitutedArg'\n      }\n\n      // if (this.reduction instanceof Alpha) {\n      //   className += ' alpha'\n      // }\n\n      const acc : JSX.Element = (\n        <span\n          className={ className }\n          title={ title }\n          onClick={ () => {\n            (context as any).identifier = Symbol()\n            this.onClick({ type : ASTReductionType.BETA, context, broken : new Set })\n            reportEvent('Breakpoint added to argument', 'Breakpoint was added', '')\n          }\n          }\n        >{ lambda.argument.name() }\n        </span>\n      )\n\n      this.printMultiLambda(lambda, acc)\n    }\n    else {\n      const context : Variable = lambda.argument\n\n      // lambda.argument.visit(this)\n      \n      // const args : JSX.Element | null = this.rendered\n\n      lambda.body.visit(this)\n      const body : JSX.Element | null = this.rendered\n\n      let className : string = 'argument'\n      let title : string = ''\n\n      if (this.isBreakpoint(lambda.argument)) {\n        className += ' breakpoint'\n        title = 'Will break on substitution'\n      }\n\n      // TODO: same here\n      if (this.argument\n        &&\n        this.argument.name() === context.name()) {\n          className += ' substitutedArg'\n      }\n\n      this.rendered = (\n        <span className='function' >\n          (\n          <span\n            className='lambda'\n            >\n              λ { ' ' }\n          </span>\n          <span\n            className='arguments'\n            onClick={ () => {\n              (context as any).identifier = Symbol()\n              // TODO: for now it does nothing - maybe delete in the future            \n              // this.onClick({ type : Beta, context, broken : new Set })\n              // reportEvent('Breakpoint added to argument', 'Breakpoint was added', '')\n            }\n            }\n          >\n            <span\n                className={ className }\n                title={ title }\n                onClick={ () => {\n                  (context as any).identifier = Symbol()\n                  this.onClick({ type : ASTReductionType.BETA, context, broken : new Set })\n                  reportEvent('Breakpoint added', 'Breakpoint was added', '')\n                }\n                }\n            >\n              { lambda.argument.name() }\n            </span>\n            { ' ' }\n          </span>\n          . { body } \n          )\n        </span>\n      )\n    }\n\n    this.argument = argument\n    if (argument !== null) {\n      this.argument = argument\n    }\n  }\n  \n  // TODO: little bit refactored, maybe keep going\n  onChurchNumeral (churchNumber: ChurchNumeral) : void {\n    let className : string = 'churchnumeral'\n    let redex : AST | null = null\n    let redexClass : string = ' redex'\n    let title : string = ''\n\n    if (this.reduction instanceof Expansion) {\n      redex = this.reduction.target\n    }\n\n    if (this.reduction instanceof Gama && this.reduction.args.includes(churchNumber)) {\n      className += ' redex abstraction argument'\n    }\n\n    if (redex !== null\n          &&\n        redex.identifier === churchNumber.identifier\n          &&\n        redex === churchNumber\n      ) {\n        className += redexClass\n    }\n\n    if (this.isBreakpoint(churchNumber)) {\n      className += ' breakpoint'\n      title = 'Will break on Expansion'\n    }\n\n    this.rendered = (\n      <span\n        className={ className }\n        title={ title }\n        onClick={ () => {\n          (churchNumber as any).identifier = Symbol()\n          this.onClick({ type: ASTReductionType.EXPANSION, context : churchNumber, broken : new Set })\n          reportEvent('Breakpoint added to ChurchNumeral', 'Breakpoint was added', '')\n        }\n        }\n      >\n        { churchNumber.name() }\n      </span>\n    )\n  }\n\n  // TODO: little bit refactored, maybe keep going  \n  onMacro (macro: Macro) : void {\n    let className = 'macro'\n    let redex : AST | null = null\n    let redexClass : string = ' redex'\n    let title : string = ''\n\n    if (this.reduction instanceof Expansion) {\n      redex = this.reduction.target\n    } \n\n    if (this.reduction instanceof Gama) {\n      if (this.reduction.redexes.includes(macro)) {\n        [ redex ] = this.reduction.redexes\n        className += redexClass + ' abstraction'\n      }\n\n\n      if (this.reduction.args.includes(macro)) {\n        className += redexClass + ' abstraction argument'\n      }\n    }\n\n\n    if (redex !== null\n          &&\n        redex.identifier === macro.identifier\n          &&\n        redex === macro\n        ) {\n      className += redexClass\n    }\n\n    if (this.isBreakpoint(macro)) {\n      className += ' breakpoint'\n      title = 'Will break on Expansion'\n    }\n\n    this.rendered = (\n      <span\n        className={ className }\n        title={ title }\n        onClick={ () => {\n          (macro as any).identifier = Symbol()\n          this.onClick({ type: ASTReductionType.EXPANSION, context : macro, broken : new Set })\n          reportEvent('Breakpoint added to Macro', 'Breakpoint was added', '')\n        }\n        }\n      >\n        { macro.name() }\n      </span>\n    )\n  }\n  \n  onVariable (variable: Variable): void {\n    // TODO: same here - not so clean\n    let className : string = 'variable'\n\n    if (this.argument\n        &&\n        this.argument.name() === variable.name()) {\n          className += ' substitutedArg'\n          if (this.reduction instanceof Alpha) {\n            className += ' alpha'\n          }\n      }\n\n    this.rendered = <span className={ className } >{ variable.name() }</span>\n  }\n}","import React from 'react'\nimport { ASTReduction, Beta, Alpha, Expansion, Gama, ASTReductionType } from '@lambdulus/core' // , Eta\n\n\ninterface ReductionMessageProperties {\n  lastReduction : ASTReduction | null\n}\n\nexport default function ReductionMessage (props : ReductionMessageProperties) : JSX.Element {\n  const { lastReduction } = props\n\n  if (lastReduction === null) {\n    return null as any\n  }\n\n  if (lastReduction.type === ASTReductionType.BETA) {\n    return (\n      <p className='lastReduction'>\n        β reduction\n      </p>\n    )\n  }\n\n  if (lastReduction.type === ASTReductionType.ALPHA) {\n    return (\n      <p className='lastReduction'>\n        α conversion\n      </p>\n    )\n  }\n\n  if (lastReduction.type === ASTReductionType.EXPANSION) {\n    return (\n      <p className='lastReduction'>\n        Macro expansion\n      </p>\n    )\n  }\n\n  // if (lastReduction.type === ASTReductionType.ETA) {\n  //   return (\n  //     <p className='lastReduction'>\n  //       η conversion\n  //     </p>\n  //   )\n  // }\n\n  if (lastReduction.type === ASTReductionType.GAMA) {\n    return (\n      <p className='lastReduction'>\n        Simplified Application\n      </p>\n    )\n  }\n\n  else {\n    return null as any\n  }\n  \n}","import React, { memo } from 'react'\nimport { ASTReduction } from '@lambdulus/core'\n\nimport './styles/Step.css'\n\nimport { strategyToEvaluator } from './ExpressionBox'\nimport ReactPrinter from './ReactPrinter'\n// import ReductionMessage from './ReductionMessage'\nimport { EvaluationStrategy, StepRecord, Breakpoint, Evaluator } from './AppTypes'\nimport ReductionMessage from './ReductionMessage'\n// import { StrategyContext } from './DataInjector'\n\n\ninterface StepWrapperProperties {\n  stepRecord : StepRecord\n  breakpoints : Array<Breakpoint>\n  addBreakpoint (breakpoint : Breakpoint) : void\n  children : JSX.Element\n  lastStep : boolean\n}\n\ninterface StepProperties {\n  stepRecord : StepRecord\n  breakpoints : Array<Breakpoint>\n  addBreakpoint (breakpoint : Breakpoint) : void\n  children : JSX.Element\n  strategy : EvaluationStrategy\n  lastStep : boolean\n}\n\n// This is done because of highlighting - if Strategy is changed ->\n// old steps should not be re-highlighted with changed Strategy - but stay same\nconst StepMemo = memo(Step, (props : StepProperties) => !props.lastStep)\n\nexport default function StepWrapper (props : StepWrapperProperties) : JSX.Element {\n  // return(\n  //   <StrategyContext.Consumer>\n  //     { \n  //       (strategy : EvaluationStrategy) => <StepMemo { ...props } strategy={ strategy } />\n  //     }\n  //   </StrategyContext.Consumer>\n  // )\n  return(\n    <StepMemo { ...props } strategy={ EvaluationStrategy.NORMAL } />\n  )\n}\n\nfunction Step (props : StepProperties) : JSX.Element | null {\n  const { stepRecord, addBreakpoint, breakpoints, children, strategy } = props\n  const { ast : tree, lastReduction, step, message } = stepRecord\n\n  if (tree === null) {\n    return null\n  }\n\n  const evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(tree)\n  const reduction : ASTReduction = evaluator.nextReduction\n  const printer : ReactPrinter = new ReactPrinter(tree, addBreakpoint, reduction, breakpoints)\n\n  const incorrectStep : boolean = stepRecord.message.indexOf('Incorrect step.') === 0\n  const correctStep : boolean = stepRecord.message.indexOf('Correct.') === 0\n  const exerciseStep : boolean = incorrectStep || correctStep\n\n  return (\n    <span className='step'>\n      <ReductionMessage lastReduction={ lastReduction } />\n      <div className='inlineblock' >\n        <p className='stepNumber' >\n          { step } :\n        </p>\n        { printer.print() }\n        { children }\n        {\n          stepRecord.message === '' ?\n            null\n            :\n            exerciseStep === false ?\n            <p className='stepMessage' >\n              { stepRecord.message }\n            </p>\n            :\n            incorrectStep === true ?\n              <p className='stepMessage incorrect' >\n                Incorrect input: <i className='userInput'>`{ stepRecord.message.substr(15) }`</i>\n              </p>\n            :\n              <p className='stepMessage correct' >\n                { stepRecord.message }\n              </p>\n        }\n      </div>\n    </span>\n  )\n}","import React, { useContext, ReactNode } from 'react'\n\nimport Step from './Step'\n// import { AddBoxContext } from './MethodInjector'\nimport { Breakpoint, StepRecord, UntypedLambdaState } from './AppTypes'\n// import { DeleteBox, MakeActiveContext } from './BoxSpace'\n\ninterface InactiveExpressionProps {\n  className : string\n  breakpoints : Array<Breakpoint>\n  history : Array<StepRecord>\n\n  createBoxFrom (stepRecord : StepRecord) : UntypedLambdaState\n}\n\n\nexport default function InactiveExpression (props : InactiveExpressionProps) : JSX.Element {\n  const { className } = props\n  // const deleteBox = useContext(DeleteBox)\n  // const makeActive = useContext(MakeActiveContext)\n\n  return (\n    <div\n      className={ className + ' inactiveBox' }\n    >\n      <ul className='UL'>\n        <li key={ 0 } className='activeStep LI'>\n          <Step\n            breakpoints={ props.breakpoints }\n            addBreakpoint={ () => {} } // blank function - NOOP\n            stepRecord={ props.history[0] }\n            lastStep={ false }\n          >\n            \n            {/* <AddBoxContext.Consumer>\n              {\n                (addBox : (boxState : BoxState) => void) => <i\n                  className=\"hiddenIcon fas fa-pencil-alt\"\n                  onClick={ () => addBox(props.createBoxFrom(props.history[0])) }\n                />\n              }\n            </AddBoxContext.Consumer> */}\n            \n          </Step>\n        </li>\n      </ul>\n      <p className='inactiveMessage'>\n        Collapsing { props.history.length - 1 } { props.history.length === 2 ? 'step' : 'steps' }. Double click to activate this box.\n      </p>\n    </div>\n  )\n}"," import React, { PureComponent, ReactNode } from 'react'\n\n// import Controls from './Controls' // TODO: Controls are gonna be imported from the Frontend app - or maybe not even imported just passed as children\nimport Step from './Step'\nimport { PromptPlaceholder, UntypedLambdaState, Breakpoint, StepRecord } from './AppTypes'\nimport Editor from '../components/Editor'\n// import { DeleteBox } from './BoxSpace'\n// import { AddBoxContext } from './MethodInjector'\nimport { mapLeftFromTo } from '../misc'\n// import BoxTopBar from './BoxTopBar'\n// import Controls from './ExerciseSwitch'\n\n\ninterface EvaluatorProps {\n  className : string\n  isExercise : boolean\n  state : UntypedLambdaState\n  breakpoints : Array<Breakpoint>\n  history : Array<StepRecord>\n  editor : {\n    placeholder : string\n    content : string\n    caretPosition : number\n    syntaxError : Error | null\n  }\n  isNormalForm : boolean\n\n  createBoxFrom (stepRecord : StepRecord) : UntypedLambdaState\n  setBoxState (state : UntypedLambdaState) : void\n  onContent (content : string, caretPosition : number) : void\n  onEnter () : void\n  onExecute () : void\n  addBox (box : UntypedLambdaState) : void\n}\n\nexport default class Expression extends PureComponent<EvaluatorProps> {\n  constructor (props : EvaluatorProps) {\n    super(props)\n\n    this.addBreakpoint = this.addBreakpoint.bind(this)\n  }\n\n  render () : JSX.Element {\n    const { className, isExercise, state, editor } = this.props\n\n    const {\n      placeholder,\n      content,\n      caretPosition,\n      syntaxError,\n    } = editor\n\n    return (\n      <div className={ className }>\n        <ul className='UL'>\n          {\n            mapLeftFromTo(0, this.props.history.length - 2, this.props.history, (stepRecord : StepRecord, i : Number) =>\n              <li key={ i.toString() } className='inactiveStep LI' >\n                <Step\n                  breakpoints={ this.props.breakpoints }\n                  addBreakpoint={ () => {} }\n                  stepRecord={ stepRecord }\n                  lastStep={ false }\n                >\n                  <i\n                    className=\"hiddenIcon fas fa-pencil-alt\"\n                    title='Copy this to new box'\n                    onClick={ () => this.props.addBox(this.props.createBoxFrom(stepRecord)) }\n                  />\n                </Step>\n              </li>)\n          }\n          <li key={this.props.history.length - 1} className='activeStep LI'>\n            <Step\n              breakpoints={ this.props.breakpoints }\n              addBreakpoint={ this.addBreakpoint }\n              stepRecord={ this.props.history[this.props.history.length - 1] }\n              lastStep={ true }\n            >\n                <i\n                  className=\"hiddenIcon fas fa-pencil-alt\"\n                  title='Copy this to new box'\n                  onClick={ () => this.props.addBox(this.props.createBoxFrom(this.props.history[this.props.history.length - 1])) }\n                />\n            </Step>\n          </li>\n        </ul>\n        {\n          this.props.isNormalForm ?\n          null\n            :\n          <Editor\n            placeholder={ placeholder } // data\n            content={ content } // data\n            caretPosition={ caretPosition } // data\n            syntaxError={ syntaxError } // data\n            submitOnEnter={ true } // data\n\n            onContent={ this.props.onContent } // fn\n            onEnter={ this.props.onEnter } // fn // tohle asi bude potreba\n            onExecute={ this.props.onExecute } // fn // tohle asi bude potreba\n          />\n        }\n      </div>\n    )\n  }\n\n  addBreakpoint (breakpoint : Breakpoint) : void {\n    let { state, setBoxState } = this.props\n  \n    setBoxState({\n      ...state,\n      breakpoints : [ ...state.breakpoints, breakpoint ],\n    })\n  }\n}","import React, { PureComponent, ReactNode } from 'react'\n\nimport {\n  AST,\n  ASTReduction,\n  None,\n  NormalEvaluator,\n  Beta,\n  Lambda,\n  Variable,\n  Expansion,\n  ChurchNumeral,\n  Macro,\n  Token,\n  tokenize,\n  parse,\n  ApplicativeEvaluator,\n  OptimizeEvaluator,\n  MacroMap,\n  NormalAbstractionEvaluator,\n} from \"@lambdulus/core\"\n\nimport './styles/EvaluatorBox.css'\n\nimport { BoxType, BoxState } from '../Types'\n\nimport { TreeComparator } from './TreeComparator'\nimport EmptyEvaluator from './EmptyExpression'\nimport InactiveEvaluator from './InactiveExpression'\nimport Expression from './Expression'\nimport { EvaluationStrategy, PromptPlaceholder, UntypedLambdaState, Evaluator, StepRecord, Breakpoint } from './AppTypes'\nimport { reportEvent } from '../misc'\n\n\nexport function strategyToEvaluator (strategy : EvaluationStrategy) : Evaluator {\n  switch (strategy) {\n    case EvaluationStrategy.NORMAL:\n      return NormalEvaluator as any\n \n    case EvaluationStrategy.APPLICATIVE:\n      return ApplicativeEvaluator as any\n\n    case EvaluationStrategy.OPTIMISATION:\n      return OptimizeEvaluator as any\n\n    case EvaluationStrategy.ABSTRACTION:\n      return NormalAbstractionEvaluator as any\n  }\n}\n\nexport interface EvaluationProperties {\n  state : UntypedLambdaState\n  isActive : boolean\n  // macroTable : MacroMap\n\n  setBoxState (state : UntypedLambdaState) : void\n  addBox (box : BoxState) : void\n}\n\nexport default class ExpressionBox extends PureComponent<EvaluationProperties> {\n  constructor (props : EvaluationProperties) {\n    super(props)\n\n    this.onContent = this.onContent.bind(this)\n    this.onSubmitExpression = this.onSubmitExpression.bind(this)\n    this.parseExpression = this.parseExpression.bind(this)\n    this.onEnter = this.onEnter.bind(this)\n    this.onExerciseStep = this.onExerciseStep.bind(this)\n    this.onStep = this.onStep.bind(this)\n    this.onExecute = this.onExecute.bind(this)\n    this.onRun = this.onRun.bind(this)\n    this.onStop = this.onStop.bind(this)\n    this.shouldBreak = this.shouldBreak.bind(this)\n    this.createBoxFrom = this.createBoxFrom.bind(this)\n  }\n\n  render () : JSX.Element {\n    const { state, isActive, addBox } : EvaluationProperties = this.props\n    const {\n      history,\n      breakpoints,\n      isExercise,\n      strategy,\n      expression,\n      editor,\n    } : UntypedLambdaState = state\n\n    let className : string = 'box boxEval'\n    const { isNormalForm } = history.length ? history[history.length - 1] : { isNormalForm : false }\n\n    if (expression === '') {\n      return (\n        <EmptyEvaluator\n          className={ className }\n          isActive={ this.props.isActive }\n          editor={ editor }\n          history={ history }\n\n          onContent={ this.onContent }\n          onEnter={ this.onEnter }\n          onExecute={ this.onExecute }\n        />\n      )\n    }\n\n    if (isExercise) {\n      className += ' boxExercise'\n    }\n\n    // TODO: Maybe I will take this out\n    // Frontend may take care of that\n    if ( ! isActive) {\n      return (\n        <InactiveEvaluator\n          className={ className }\n          breakpoints={ breakpoints }\n          history={ history }\n          \n          createBoxFrom={ this.createBoxFrom }\n        />\n      )\n    }\n\n    return (\n      <Expression\n        className={ className }\n        isExercise={ isExercise }\n        state={ state }\n        breakpoints={ breakpoints }\n        history={ history }\n        editor={ editor }\n        isNormalForm={ isNormalForm }\n\n        createBoxFrom={ this.createBoxFrom }\n        setBoxState={ this.props.setBoxState }\n        onContent={ this.onContent }\n        onEnter={ this.onEnter }\n        onExecute={ this.onExecute }\n        addBox={ addBox }\n      />\n    )\n  }\n\n  createBoxFrom (stepRecord : StepRecord) : UntypedLambdaState {\n    const { state } : EvaluationProperties = this.props\n    const {\n      strategy,\n      SLI,\n      expandStandalones,\n    } : UntypedLambdaState = state\n    const { ast } = stepRecord\n    const content = ast.toString()\n\n    return {\n      type : BoxType.UNTYPED_LAMBDA,\n      __key : Date.now().toString(),\n      title : \"\",\n      expression : \"\",\n      ast : null,\n      history : [],\n      isRunning : false,\n      breakpoints : [],\n      timeoutID : undefined,\n      timeout : 10,\n      isExercise : false,\n      strategy,\n      SLI,\n      expandStandalones,\n      editor : {\n        placeholder : PromptPlaceholder.EVAL_MODE,\n        content,\n        caretPosition : content.length,\n        syntaxError : null,\n      }\n    }\n  }\n\n  onContent (content : string, caretPosition : number) : void {\n    const { state, setBoxState } = this.props\n\n    setBoxState({\n      ...state,\n      editor : {\n        ...state.editor,\n        content,\n        caretPosition,\n        syntaxError : null,\n      }\n    })\n  }\n\n  onEnter () : void {\n    const { expression, isExercise, editor : { content } } = this.props.state\n\n    if (expression === '') {\n      this.onSubmitExpression()\n    }\n    else if (content !== '' && isExercise) {\n      this.onExerciseStep()\n    }\n    else if (content === '' && (! isExercise)) {\n      this.onStep()\n    }\n    else {\n      console.log('Error: Something unexpected just happened. A')\n    }\n  }\n\n  onSubmitExpression () : void {\n    const { state, setBoxState } = this.props\n    const {\n      editor : { content },\n    } = state\n\n    try {\n      const ast : AST = this.parseExpression(content)\n\n      setBoxState({\n        ...state,\n        ast,\n        expression : content,\n        history : [ {\n          ast : ast.clone(),\n          lastReduction : new None,\n          step : 0,\n          message : '',\n          isNormalForm : false\n        } ],\n        editor : {\n          content : '',\n          caretPosition : 0,\n          placeholder : PromptPlaceholder.EVAL_MODE,\n          syntaxError : null,\n        }\n      })\n\n      reportEvent('Submit Expression', 'submit valid', content)\n    } catch (exception) {\n      setBoxState({\n        ...state,\n        editor : {\n          ...state.editor,\n          syntaxError : exception.toString(),\n        }\n      })\n\n      reportEvent('Submit Expression', 'submit invalid', content)\n    }\n  }\n\n  onExerciseStep () {\n    const { state, setBoxState } = this.props\n    const { strategy, history, editor : { content } } = state\n    \n    try {\n      const userAst : AST = this.parseExpression(content)\n      const stepRecord : StepRecord = history[history.length - 1]\n      const { isNormalForm, step } = stepRecord\n      let { ast, lastReduction } = stepRecord\n      ast = ast.clone()\n\n      if (isNormalForm) {\n        // TODO: do something about it\n        // say user - there are no more steps and it is in normal form        \n        // TODO: consider immutability\n        stepRecord.message = 'No more steps available. Expression is in normal form.'\n\n        setBoxState({\n          ...state,\n        })\n\n        reportEvent('Exercise Step', 'Step Already in normal form', content)\n\n        return\n      }\n    \n      const normal : Evaluator = new (strategyToEvaluator(strategy) as any)(ast)\n      lastReduction = normal.nextReduction\n    \n      if (normal.nextReduction instanceof None) {\n        // TODO: refactor PLS - update history\n        // TODO: say user it is in normal form and they are mistaken\n        stepRecord.isNormalForm = true\n        stepRecord.message = 'Expression is already in normal form.'\n        \n        setBoxState({\n          ...state,\n        })\n\n        reportEvent('Exercise Step', 'Step Already in Normal Form', content)\n        \n        return\n      }\n    \n      ast = normal.perform()\n    \n      let message : string = ''\n      const comparator : TreeComparator = new TreeComparator([ userAst, ast ])\n\n      if (comparator.equals) {\n        ast = userAst\n        message = 'Correct.'\n\n        reportEvent('Exercise Step', 'Valid Step', content)\n      }\n      else {\n        // TODO: say user it was incorrect\n        // TODO: na to se pouzije uvnitr EvaluatorState prop messages nebo tak neco\n        console.log('Incorrect step')\n        message = `Incorrect step. ${content}`\n\n        reportEvent('Exercise Step', 'Invalid Step', content)\n      }\n\n      setBoxState({\n        ...state,\n        history : [ ...history, { ast, lastReduction, step : step + 1, message, isNormalForm : false } ],\n        editor : {\n          ...state.editor,\n          content : '',\n          caretPosition : 0,\n          placeholder : PromptPlaceholder.VALIDATE_MODE,\n          syntaxError : null,\n        }\n      })\n    } catch (exception) {\n      // TODO: print syntax error\n      // TODO: do it localy - no missuse of onSubmit\n\n      // TODO: print syntax error\n\n      reportEvent('Exercise Step', 'Syntax error in Step', content)\n    }\n  }\n\n  onStep () : void {\n    const { state, setBoxState } = this.props\n    const { strategy, history, editor : { content } } = state\n    const stepRecord = history[history.length - 1]\n    const { isNormalForm, step } = stepRecord\n    let { ast, lastReduction } = stepRecord\n    ast = ast.clone()\n  \n    if (isNormalForm) {\n      return\n    }\n\n    const normal : Evaluator = new (strategyToEvaluator(strategy) as any)(ast)\n    lastReduction = normal.nextReduction\n  \n    if (normal.nextReduction instanceof None) {\n      stepRecord.isNormalForm = true\n      stepRecord.message = 'Expression is in normal form.'\n      \n      setBoxState({\n        ...state,\n      })\n      \n      reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())\n\n      return\n    }\n  \n    ast = normal.perform()\n\n    if (ast instanceof Macro || ast instanceof ChurchNumeral) {\n      stepRecord.isNormalForm = true\n      stepRecord.message = 'Expression is in normal form.'\n\n      reportEvent('Evaluation Step', 'Step Normal Form Reached with Number or Macro', ast.toString())\n    }\n  \n    setBoxState({\n      ...state,\n      history : [ ...history, { ast, lastReduction, step : step + 1, message : '', isNormalForm : false } ],\n\n    })\n\n    reportEvent('Evaluation Step', 'Step', ast.toString())\n  }\n\n  onExecute () : void {\n    const { state, setBoxState } = this.props\n    const { isRunning, isExercise } = state\n\n    if (isExercise) {\n      // TODO: exercises can not be run - some message to user???\n      return\n    }\n\n    if (isRunning) {\n      this.onStop()\n    }\n    else {\n      const { timeout, history } = state\n      const stepRecord = history[history.length - 1]\n  \n      if (stepRecord.isNormalForm) {\n        return\n      }\n      \n      const { ast, step, lastReduction, isNormalForm, message } = stepRecord\n      history.push(history[history.length - 1])\n      history[history.length - 2] = { ast : ast.clone(), step, lastReduction, message : 'Skipping some steps...', isNormalForm }\n\n      setBoxState({\n        ...state,\n        isRunning : true,\n        timeoutID : window.setTimeout(this.onRun, timeout),\n      })\n\n      reportEvent('Execution', 'Run Evaluation', ast.toString())\n    }\n  }\n\n  onRun () : void {\n    const { state, setBoxState } = this.props\n    const { strategy } = state\n    let { history, isRunning, breakpoints, timeoutID, timeout } = state\n    const stepRecord : StepRecord = history[history.length - 1]\n    const { isNormalForm, step } = stepRecord\n    let { lastReduction } = stepRecord\n\n    if ( ! isRunning) {\n      return\n    }\n    \n    if (isNormalForm) {\n      setBoxState({\n        ...state,\n        isRunning : false,\n        timeoutID : undefined,\n      })\n  \n      return\n    }\n  \n    let { ast } = stepRecord\n    const normal : Evaluator = new (strategyToEvaluator(strategy) as any)(ast)\n    lastReduction = normal.nextReduction\n    \n    if (normal.nextReduction instanceof None) {\n      // TODO: consider immutability\n      history.pop()\n      history.push({\n        ast,\n        lastReduction : stepRecord.lastReduction,\n        step,\n        message : 'Expression is in normal form.',\n        isNormalForm : true\n      })\n  \n      setBoxState({\n        ...state,\n        isRunning : false,\n        timeoutID : undefined,\n      })\n  \n      return\n    }\n  \n    // TODO: maybe refactor a little\n    const breakpoint : Breakpoint | undefined = breakpoints.find(\n      (breakpoint : Breakpoint) =>\n        this.shouldBreak(breakpoint, normal.nextReduction)\n    )\n\n    if (breakpoint !== undefined) {\n      // TODO: consider immutability\n      if (normal.nextReduction instanceof Expansion) {\n        breakpoint.broken.add(normal.nextReduction.target)\n      }\n      if (normal.nextReduction instanceof Beta && normal.nextReduction.redex.left instanceof Lambda) {\n        breakpoint.broken.add(normal.nextReduction.redex.left.argument)\n      }\n\n      window.clearTimeout(timeoutID)\n      reportEvent('Evaluation Run Ended', 'Breakpoint was reached', ast.toString())\n\n\n      setBoxState({\n        ...state,\n        isRunning : false,\n        timeoutID,\n      })\n\n      return\n    }\n  \n    ast = normal.perform()\n\n    history[history.length - 1] = { ast, lastReduction, step : step + 1, message : '', isNormalForm }\n\n    if (ast instanceof Macro || ast instanceof ChurchNumeral) {\n      history[history.length - 1] = { ast, lastReduction, step : step + 1, message : 'Expression is in normal form.', isNormalForm : true }\n\n      reportEvent('Evaluation Run Ended', 'Step Normal Form Reached with Number or Macro', ast.toString())\n    }\n    \n    setBoxState({\n      ...state,\n      timeoutID : window.setTimeout(this.onRun, timeout)\n    })\n  }\n\n  onStop () : void {\n    const { state, setBoxState } = this.props\n    const { timeoutID } = state\n  \n    window.clearTimeout(timeoutID)\n  \n    setBoxState({\n      ...state,\n      isRunning : false,\n      timeoutID : undefined\n    })\n  }\n\n  // TODO: breakpointy se pak jeste musi predelat\n  shouldBreak (breakpoint : Breakpoint, reduction : ASTReduction) : boolean {\n    // if (reduction.type === breakpoint.type\n    //     && reduction instanceof Beta && breakpoint.context instanceof Lambda\n    //     && reduction.target.identifier === breakpoint.context.body.identifier\n    //   ) {\n    //     return true\n    // }\n    if (reduction.type === breakpoint.type\n        && reduction instanceof Beta && breakpoint.context instanceof Variable\n        && reduction.redex.left instanceof Lambda\n        && reduction.redex.left.argument.identifier === breakpoint.context.identifier\n        && ! breakpoint.broken.has(reduction.redex.left.argument)\n    ) {\n      return true\n    }\n\n    if (reduction.type === breakpoint.type\n        && reduction instanceof Expansion && breakpoint.context instanceof ChurchNumeral\n        && reduction.target.identifier === breakpoint.context.identifier\n        && ! breakpoint.broken.has(reduction.target)\n    ) {\n      return true\n    }\n    if (reduction.type === breakpoint.type\n        && reduction instanceof Expansion && breakpoint.context instanceof Macro\n        && reduction.target.identifier === breakpoint.context.identifier\n        && ! breakpoint.broken.has(reduction.target)\n    ) {\n      return true\n    }\n  \n    return false\n  }\n\n  // THROWS Exceptions\n  parseExpression (expression : string) : AST {\n    // const { macroTable } = this.props\n\n    const { SLI : singleLetterVars } = this.props.state\n\n    const tokens : Array<Token> = tokenize(expression, { lambdaLetters : ['λ'], singleLetterVars })\n    const ast : AST = parse(tokens, {}) // macroTable\n\n    return ast\n  }\n}","import React from 'react'\n\nimport 'github-markdown-css'\nimport { NoteState } from './AppTypes'\nimport Editor from '../components/Editor'\nconst ReactMarkdown = require('react-markdown')\n\nexport interface NoteProperties {\n  state : NoteState\n  isActive : boolean\n\n  setBoxState (state : NoteState) : void\n}\n\nexport default function Note (props : NoteProperties) : JSX.Element {\n  const {\n    state : {\n      note,\n      editor : { placeholder, content, caretPosition, syntaxError },\n      isEditing,\n    },\n    isActive,\n    setBoxState,\n  } = props\n  \n  const onContent = (content : string, caretPosition : number) => {\n    setBoxState({\n      ...props.state,\n      note : content,\n      editor : {\n        ...props.state.editor,\n        content,\n        caretPosition,\n        syntaxError : null,\n      }\n    })\n    // this.updateURL(expression) // tohle musim nejak vyresit - mozna ta metoda setBoxState v APP bude checkovat propisovat do URL\n  }\n\n  if (isEditing && isActive) {\n    return (\n      <div className='box boxNoteEditor'>\n        <Editor\n          placeholder={ placeholder } // data\n          content={ content } // data\n          caretPosition={ caretPosition } // data\n          syntaxError={ syntaxError } // data\n          submitOnEnter={ false } // data\n          \n          onContent={ onContent } // fn\n          onEnter={ () => void 0 } // fn\n          onExecute={ () => {} } // fn\n          // onReset={ this.onClear } // fn not yet\n        />\n      </div>\n    )\n  }\n\n\n  return (\n    <div className='box boxNote'>\n      <ReactMarkdown className='markdown-body' source={ note } />\n    </div>\n  )\n}","import React, { useContext, ReactNode } from 'react'\n\n// import Evaluator from './ExpressionBox'\n// import MacroDefinition from './MacroDefinition'\n// import Note from './Note'\n// import { MacroTableContext } from './EvaluatorSpace'\n// import { SetBoxContext } from './BoxSpace'\nimport { BoxType, BoxState } from '../Types'\n\nimport { UntypedLambdaState } from '../untyped-lambda-integration/AppTypes'\n\nimport EvaluatorIntegration from '../untyped-lambda-integration/ExpressionBox'\n\nimport { NoteState } from '../markdown-integration/AppTypes'\nimport Note from '../markdown-integration/Note'\n\n// import { BoxState } from '../AppTypes'\n\ninterface BoxProperties {\n  state : BoxState\n  isActive : boolean\n\n  updateBoxState (box : BoxState) : void\n  addBox (box : BoxState) : void\n}\n\nexport default function Box (props : BoxProperties) : JSX.Element {\n  const { state, isActive, updateBoxState, addBox } : BoxProperties = props\n  const { type } = state\n\n  // const macroTable = useContext(MacroTableContext)\n  // const setBoxState = useContext(SetBoxContext)\n\n\n  if (type === BoxType.UNTYPED_LAMBDA) {\n    return (\n      <EvaluatorIntegration\n        state={ state as UntypedLambdaState }\n        isActive={ isActive }\n        // macroTable={ macroTable }\n        \n        setBoxState={ updateBoxState }\n        addBox={ addBox }\n      />\n    )\n  }\n  if (type === BoxType.MARKDOWN) {\n    return (\n      <Note\n        state={ state as NoteState }\n        isActive={ isActive }\n\n        setBoxState={ updateBoxState }\n      />\n    )\n  }\n  else {\n    return (\n      <div>\n        Uknown BOX\n      </div>\n    )\n  }\n\n  // if (type === BoxType.MACRO) {\n  //   return (\n  //     <div className=''>\n  //       <MacroDefinition\n  //         state={ state as MacroDefinitionState }\n  //         setBoxState={ setBoxState }\n\n  //         // addBox={ addBox }\n  //       />\n  //     </div>\n  //   )\n  // }\n\n  // if (type === BoxType.MARKDOWN) {\n  //   return (\n  //     <div className=''>\n  //       <Note\n  //         state={ state as NoteState }\n  //         isActive={ isActive }\n\n  //         // addBox={ addBox }\n  //       />\n  //     </div>\n  //   )\n  // }\n\n  // return null as any // never happens\n}","import React, { ChangeEvent } from 'react'\n\nimport 'pretty-checkbox'\nimport './styles/ExerciseSwitch.css'\n\nconst { Switch } = require('pretty-checkbox-react')\n\n\nexport interface ControlsProps {\n  isExercise : boolean\n  makeExercise () : void\n  endExercise () : void\n}\n\n// TODO: maybe not really needed or rename it accordingly\nexport default function ExerciseSwitch (props : ControlsProps) : JSX.Element {\n  const {\n    isExercise,\n    makeExercise,\n    endExercise,\n  } : ControlsProps = props\n\n  return (\n    <div className=\"controls\">\n      <div title='Write the next step yourself'>\n        <Switch\n          className='control'\n          checked={ isExercise }\n          onChange={ (e : ChangeEvent<HTMLInputElement>) =>\n            e.target.checked ? makeExercise() : endExercise()\n          }\n          shape=\"fill\"\n        >\n          Exercise\n        </Switch>\n      </div>\n    </div>\n  )\n}","import React, { Component } from 'react'\n\nimport Controls from './ExerciseSwitch'\nimport { UntypedLambdaState, PromptPlaceholder } from './AppTypes'\nimport { BoxState } from '../Types'\n\n\ninterface Props {\n  state : UntypedLambdaState\n  isActive : boolean\n  removeBox : () => void\n  updateBoxState : (box : BoxState) => void\n}\n\n\nexport default function BoxTopBar (props : Props) : JSX.Element {\n  const { state, isActive, removeBox, updateBoxState } = props\n  const { isExercise, editor, expression, title } = state\n\n  return (\n    <div className='boxTopBar'>\n      <div className='topBarTitle' contentEditable={ true } onBlur={ (e) => updateBoxState({ ...state, title : e.target.textContent || \"\" }) }>\n        { title === \"\" ? \"Click Here to Change the Title\" : title }\n      </div>\n      {\n        expression === '' ?\n          null\n        :\n        <Controls\n          isExercise={ isExercise }\n          makeExercise={ () =>\n            updateBoxState({\n              ...state,\n              isExercise : true,\n              editor: {\n                ...state.editor,\n                placeholder : PromptPlaceholder.VALIDATE_MODE,\n              },\n            })\n          }\n          endExercise={ () =>\n            updateBoxState({\n              ...state,\n              isExercise : false,\n              editor: {\n                ...state.editor,\n                placeholder : PromptPlaceholder.EVAL_MODE,\n              },\n            })\n          }\n        />\n      }\n\n      <i\n        className='removeBox far fa-trash-alt'\n        onClick={ removeBox }\n        title='Remove this Box'\n      />\n    </div>\n  )\n}","import React, { Component, ChangeEvent } from 'react'\n\nimport { NoteState, PromptPlaceholder } from './AppTypes'\n\nimport 'pretty-checkbox'\nimport './styles/EditingSwitch.css'\nimport { BoxState } from '../Types'\n\nconst { Switch } = require('pretty-checkbox-react')\n\n\ninterface Props {\n  state : NoteState\n  isActive : boolean\n  removeBox : () => void\n  updateBoxState : (box : BoxState) => void\n}\n\n\nexport default function BoxTopBar (props : Props) : JSX.Element {\n  const { state, isActive, removeBox, updateBoxState } = props\n  const { note, isEditing, title } = state\n\n  return (\n    <div className='boxTopBar'>\n      <div className='topBarTitle' contentEditable={ true } onBlur={ (e) => updateBoxState({ ...state, title : e.target.textContent || \"\" }) }>\n        { title === \"\" ? \"Click Here to Change the Title\" : title }\n      </div>\n      <div className='controls' title='Edit as Markdown'>\n        <Switch\n            className='control'\n            checked={ isEditing }\n            onChange={ (e : ChangeEvent<HTMLInputElement>) =>\n              updateBoxState({ ...state, isEditing : e.target.checked })\n            }\n            shape=\"fill\"\n          >\n            Editing\n          </Switch>\n      </div>\n\n      <i\n        className='removeBox far fa-trash-alt'\n        onClick={ removeBox }\n        title='Remove this Box'\n      />\n    </div>\n  )\n}","import React from 'react'\nimport { BoxType, BoxState } from '../Types'\nimport UntypedLambdaBTB from '../untyped-lambda-integration/BoxTopBar'\nimport { UntypedLambdaState } from '../untyped-lambda-integration/AppTypes'\n\nimport MarkdownBTB from '../markdown-integration/BoxTopBar'\nimport { NoteState } from '../markdown-integration/AppTypes'\n\n\ninterface Props {\n  state : BoxState\n  isActive : boolean\n  removeBox : () => void\n  updateBoxState : (box : BoxState) => void\n}\n\n\nexport default function BoxTitleBar (props : Props) : JSX.Element {\n  const { state, isActive, updateBoxState, removeBox } : Props = props\n  const { type } = state\n\n\n  if (type === BoxType.UNTYPED_LAMBDA) {\n    return (\n      <UntypedLambdaBTB\n        state={ state as UntypedLambdaState }\n        isActive={ isActive }\n        removeBox={ removeBox }\n        updateBoxState={ updateBoxState }\n      />\n    )\n  }\n  if (type === BoxType.MARKDOWN) {\n    return (\n      <MarkdownBTB\n        state={ state as NoteState }\n        isActive={ isActive }\n        removeBox={ removeBox }\n        updateBoxState={ updateBoxState }\n      />\n    )\n  }\n  else {\n    return (\n      <div>\n        Uknown BOX\n      </div>\n    )\n  }\n\n}","import React from 'react'\nimport { mapBoxTypeToStr } from '../AppTypes'\nimport Box from './Box'\nimport BoxTitleBar from './BoxTitleBar'\nimport { BoxState } from '../Types'\n\n\ninterface Props {\n  isActiveBox : boolean\n  box : BoxState\n\n  makeActive : () => void\n  updateBoxState : (state : BoxState) => void\n  removeBox : () => void\n  insertBefore : (state : BoxState) => void\n}\n\nexport function BoxContainer (props : Props) : JSX.Element {\n  const { isActiveBox, box, makeActive, updateBoxState, insertBefore, removeBox } : Props = props\n\n  const boxTypeClassName : string = mapBoxTypeToStr(box.type)\n\n  return (\n    <div\n      className={ `boxContainer ${ isActiveBox ? 'active' : 'inactive' } ${boxTypeClassName}` }\n      onDoubleClick={ () => makeActive() }\n    >\n      <BoxTitleBar\n        state={ box }\n        isActive={ isActiveBox }\n        removeBox={ () => removeBox() }\n        updateBoxState={ (box : BoxState) => updateBoxState(box) }\n      />\n      <Box\n        state={ box }\n        isActive={ isActiveBox }\n        updateBoxState={ (box : BoxState) => updateBoxState(box) }\n        addBox={ (box : BoxState) => insertBefore(box) }\n      />\n    </div>\n  )\n}","// This component needs to be able to specify which Boxes are allowed inside\n// It will also have other settings - maybe something like lock - if it's locked, you can not modify it\n// Exam mode will feature the build of the Frontend which will not import any of the Evaluation Boxes\n\n\nimport React, { PureComponent } from 'react'\nimport { CreateBox } from '../components/CreateBox'\nimport { BoxType, NotebookState, GlobalSettings, BoxState } from '../Types'\n\nimport { onMarkDownBlur, NoteState } from '../markdown-integration/AppTypes'\nimport { BoxContainer } from '../components/BoxContainer'\n\ninterface Props {\n  state : NotebookState\n  settings : GlobalSettings\n\n  updateNotebook (notebook : NotebookState) : void\n}\n\nexport default class Notebook extends PureComponent<Props> {\n  constructor (props : Props) {\n    super(props)\n\n    this.insertBefore = this.insertBefore.bind(this)\n    this.removeBox = this.removeBox.bind(this)\n    this.updateBoxState = this.updateBoxState.bind(this)\n    this.makeActive = this.makeActive.bind(this)\n  }\n\n  render () {\n    const { state, settings } = this.props\n    const { activeBoxIndex, boxList, allowedBoxes } = state\n\n    return (\n      <div className=\"mainSpace\">\n        {/* TODO: This will be refactore out to standalone component. */}\n        <ul className=\"boxList UL\">\n          { boxList.map(\n            (box : BoxState, i : number) =>\n            <li className=\"LI\" key={ box.__key }>\n              \n              <CreateBox\n                addNew={ (box : BoxState) => this.insertBefore(i, box) }\n                whiteList={ allowedBoxes }\n                settings={ settings }\n                />\n              \n              <BoxContainer\n                box={ box}\n                isActiveBox={ activeBoxIndex === i}\n                insertBefore={ (box : BoxState) => this.insertBefore(i, box) }\n                makeActive={ () => this.makeActive(i) }\n                removeBox={ () => this.removeBox(i) }\n                updateBoxState={ (box : BoxState) => this.updateBoxState(i, box) }\n              />          \n            </li>\n          ) }\n  \n          <CreateBox\n            addNew={ (box : BoxState) => this.insertBefore(state.boxList.length, box) }\n            whiteList={ allowedBoxes }\n            settings={ settings }\n          />\n  \n        </ul>\n      </div>\n    )\n  }\n\n  insertBefore (index : number, box : BoxState) : void {\n    const { boxList } = this.props.state\n    \n    boxList.splice(index, 0, box)\n    this.props.updateNotebook({ ...this.props.state, boxList : boxList, activeBoxIndex : index })\n  }\n\n  removeBox (index : number) : void {\n    const { boxList, activeBoxIndex } = this.props.state\n    \n    const nearestValidIndex = (i : number) => {\n      if (i < activeBoxIndex) return activeBoxIndex - 1\n      if (i > activeBoxIndex) return activeBoxIndex\n      if (boxList.length === 1) return NaN\n      if (i === 0) return i\n      return i - 1\n    }\n\n    const newIndex : number = nearestValidIndex(index)\n\n    boxList.splice(index, 1)\n    this.props.updateNotebook({ ...this.props.state, boxList : boxList, activeBoxIndex : newIndex })\n  }\n\n  /**\n   * This function is patching; not overriding\n   * @param index \n   * @param box \n   */\n  updateBoxState (index : number, box : BoxState) : void {\n    const { boxList } = this.props.state\n    boxList[index] = box\n\n    this.props.updateNotebook({ ...this.props.state, boxList })\n  }\n\n  makeActive (index : number) : void {\n    const { activeBoxIndex, boxList } = this.props.state\n\n    const currentType : BoxType = boxList[activeBoxIndex].type\n\n    switch (currentType) {\n      case BoxType.UNTYPED_LAMBDA:\n        // boxList[activeBoxIndex] = onUntypedLambdaBlur(boxList[activeBoxIndex])\n        break\n      \n      case BoxType.MARKDOWN:\n        boxList[activeBoxIndex] = onMarkDownBlur(boxList[activeBoxIndex] as NoteState)\n        break\n\n      default:\n        break\n    }\n\n    if (index !== activeBoxIndex)\n      this.props.updateNotebook({ ...this.props.state, activeBoxIndex : index, boxList })\n  }\n}","import React from 'react'\nimport 'github-markdown-css'\n\nimport guide from '../misc/UserGuide'\nconst ReactMarkdown = require('react-markdown')\n\nexport default function Help (props : {}) : JSX.Element {\n  return (\n  <div className='helpSpace'>\n    <ReactMarkdown className='markdown-body' source={ guide } />    \n  </div>)\n}","export default `# User guide\n\n## Typing expressions\n#### To write lambda expression you simply type in the prompt.\n\n## Typing λ symbol\n#### If you want to write \\`λ\\` symbol you simply type \\`\\\\\\` and Lambdulus will take care of the rest.\n\n## Multiple expressions\n#### You can also have many submitted expressions. To submit another expression you need to open new empty \\`expression box\\` by clicking on the \\`λ\\` inside the \\`+λ +Macro +MD\\` panel at the end of the notebook.\n\n## Single Letter Names (SLI)\n#### You can write lambda functions and omit whitespaces such as \\`(λabc.cba) 2 1 +\\`. To do that you have to check switch \\`Single Letter Names\\` at the top of the page.\n\n## Evaluation Strategies\n#### We have option to select from 3 evaluation strategies. The \\`Simplified\\` strategy is specific evaluation order which evaluates built-in macros atomicaly. The \\`Normal\\` and the \\`Applicative\\` strategies are sort of self describing.\n\n## Macros\n#### If you want to define your own macro - you can. You must first create empty \\`macro box\\` by clicking on the \\`+Macro\\` inside the \\`+λ +Macro +MD\\` panel at the end of the notebook. Then you write macro name followed by symbol \\`:=\\` and then valid lambda expression.\n\n## Macro Definition\n#### Inside the macro definition you can reference any valid macro which is already defined or will be defined in the future. Yes you can reference macro you are just defining inside it's own definition - whether you should or not is up to you.\n\n## List All Macros\n#### If you want to list all defined macros - built-ins and also your macros - you simply click on the \\`Macro\\` icon at the top or on the left of the page.\n\n## Remove User Macro\n#### To remove user macros - \\`because you can not remove built-ins\\` - first show all macros and then hover your mouse over the macro you want to remove and click the \\`trash bin\\` icon.\n\n## Redefine User Macro\n#### To redefine user macro - \\`because you can not redefine built-ins\\` - just create new empty \\`macro box\\` and define the already existing macro again - this time with different macro definition.\n\n## Report a Bug or Request New Features\n#### If you want to report a bug or you need some feature - click on the \\`Issues\\` button on the left or at the top of the page. Then fill in the issue on the GitHub page of the project. Definitely don't forget to check if the corresponding issue already exist.\n`","import React, { ChangeEvent } from 'react'\nimport { UntypedLambdaSettings, EvaluationStrategy } from './AppTypes'\n\nconst { Switch, Radio } = require('pretty-checkbox-react')\n\n\ninterface Props {\n  settings : UntypedLambdaSettings\n  change : (settings : UntypedLambdaSettings) => void\n}\n\nexport default function Settings (props : Props) : JSX.Element {\n  const { settings, change } : Props = props\n  const { SLI, expandStandalones, strategy } : UntypedLambdaSettings = settings\n\n  return (\n    <div className='untypedLambdaSettings'>\n      <h3>Untyped Lambda Calculus</h3>\n\n\n      <span title='Letters as names without spaces'>\n        <Switch\n          checked={ SLI }\n          disabled={ false } // TODO: tohle bude rozhodne chtit prepsat\n          shape=\"fill\"\n          \n          onChange={\n             (e : ChangeEvent<HTMLInputElement>) => // tady nejakej destructuring\n              change({ ...settings, SLI : e.target.checked })\n          }\n        >\n          Single Letter Names\n        </Switch>\n      </span>\n\n      <br></br>\n      <br></br>\n\n      <span title='Expand stand-alones'>\n        <Switch\n          checked={ expandStandalones }\n          disabled={ false } // TODO: tohle bude rozhodne chtit prepsat\n          shape=\"fill\"\n          \n          onChange={\n            (e : ChangeEvent<HTMLInputElement>) => // tady nejakej destructuring\n              change({ ...settings, expandStandalones : e.target.checked })\n          }\n        >\n          Expand stand-alones\n        </Switch>\n      </span>\n\n      <br></br>\n      <br></br>\n\n      <div className='strategies inlineblock'>\n        <p className='stratsLabel inlineblock'>Evaluation Strategies:</p>\n        <Radio\n          name=\"strategy\"\n          style=\"fill\"\n          checked={\n            strategy === EvaluationStrategy.ABSTRACTION\n          }\n          \n          onChange={\n            () => change({ ...settings, strategy : EvaluationStrategy.ABSTRACTION })\n          }\n        >\n          Simplified\n        </Radio>\n        <Radio\n          name=\"strategy\"\n          style=\"fill\"\n          checked={\n            strategy === EvaluationStrategy.NORMAL\n          }\n          \n          onChange={\n            () => change({ ...settings, strategy : EvaluationStrategy.NORMAL })\n          }\n        >\n          Normal\n        </Radio>\n        <Radio\n          name=\"strategy\"\n          style=\"fill\"\n          checked={\n            strategy === EvaluationStrategy.APPLICATIVE\n          }\n          \n          onChange={\n            () => change({ ...settings, strategy : EvaluationStrategy.APPLICATIVE })\n          }\n        >\n          Applicative\n        </Radio>\n      </div>\n    </div>\n  )\n}","import React from 'react'\n\nimport UntypedLambdaCalculusSet from '../untyped-lambda-integration/Settings'\nimport { CODE_NAME as UNTYPED_CODE_NAME, UntypedLambdaSettings } from '../untyped-lambda-integration/AppTypes'\nimport { GlobalSettings } from '../Types'\n\n\ninterface Props {\n  settings : GlobalSettings\n  updateSettings : (settings : GlobalSettings) => void\n}\n\nexport default function SettingsScreen (props : Props) : JSX.Element {\n  const { settings, updateSettings } = props\n\n  const untypedSettings : UntypedLambdaSettings = settings[UNTYPED_CODE_NAME] as UntypedLambdaSettings\n\n  return (\n    <div className='settingsSpace'>\n      <UntypedLambdaCalculusSet\n        settings={ untypedSettings }\n        change={\n          (unTypLSet : UntypedLambdaSettings) =>\n            updateSettings({ ...settings, [UNTYPED_CODE_NAME] : unTypLSet })\n        }\n      />\n    </div>\n  )\n}","import React, { Component } from 'react'\n\nimport './App.css'\n\nimport { updateSettingsInStorage, loadAppStateFromStorage, updateAppStateToStorage } from './AppTypes'\n\nimport MenuBar from './components/MenuBar'\nimport Notebook from './screens/Notebook'\nimport Help from './screens/Help'\nimport SettingsScreen from './screens/Settings'\nimport { Screen, AppState, NotebookState, GlobalSettings } from './Types'\n\n\n\n/**\n * This is the main Application\n * in the future - when building Exam Mode - I will need to replace some part of the application components\n * if it's only some component at the top, it can be done easily\n * if it's gonna replace some deeper stuff I will need to implement some Namespace FROM which app and integrations\n * will inport parts and this Namespace will take care of that\n */\n\n\ninterface Props {}\nexport default class App extends Component<Props, AppState> {\n  constructor (props : Props) {\n    super(props)\n\n    this.state = loadAppStateFromStorage()\n\n    this.setScreen = this.setScreen.bind(this)\n    this.updateNotebook = this.updateNotebook.bind(this)\n    this.changeNotebook = this.changeNotebook.bind(this)\n    this.removeNotebook = this.removeNotebook.bind(this)\n    this.updateSettings = this.updateSettings.bind(this)\n\n    // TODO: implement Class Keyboard Controller -> handling all keyboard events and firing events -> invoking handlers from this class\n    // document.addEventListener('keydown', (event : KeyboardEvent) => {\n    //   console.log(event)\n    // })\n  }\n\n\n  render () {\n    const { notebookList, currentNotebook, currentScreen } = this.state\n    const state = notebookList[currentNotebook]\n    const { settings } = state\n\n    return (\n      <div id='app'>\n        <MenuBar\n          state={ this.state }\n          onScreenChange={ this.setScreen }\n          onImport={ () => void 0 }\n          onNotebookChange={ this.changeNotebook }\n          onAddNotebook={\n            (notebook : NotebookState) =>\n              this.setState(\n                { notebookList : [ ...this.state.notebookList, notebook ],\n                  currentNotebook : this.state.currentNotebook + 1\n                })\n          }\n          // TODO: there are gonna be all kinds of Notebooks - I need to take care of that\n          onSelectNotebook={ (index : number) => this.setState({ currentNotebook : index }) }\n          onDeleteNotebook={ (index : number) => this.removeNotebook(index) }\n        />\n        {\n          (() => {\n            if (currentScreen === Screen.MAIN)\n              return <Notebook state={ state } updateNotebook={ this.updateNotebook } settings={ settings } />\n            if (currentScreen === Screen.HELP)\n              return <Help/>\n            if (currentScreen === Screen.SETTINGS)\n              return <SettingsScreen settings={ settings } updateSettings={ this.updateSettings } />\n          })()\n        }\n        \n      </div>\n    )\n  }\n\n  setScreen (screen : Screen) : void {\n    this.setState({ currentScreen : screen })\n  }\n\n  updateNotebook (notebook : NotebookState) : void {\n    const { notebookList, currentNotebook } = this.state\n\n    notebookList[currentNotebook] = notebook\n\n    this.setState({ notebookList })\n    updateAppStateToStorage({ ...this.state })\n    // NOTE: Carefuly around here - I kinda rely on the mutation of this.state.notebookList\n  }\n\n  changeNotebook (index : number) : void {\n    this.setState({ currentNotebook : index })\n  }\n\n  removeNotebook (index : number) : void {\n    // if (index === 0) return\n\n    const { notebookList, currentNotebook } = this.state\n    \n    const nearestValidIndex = (i : number) => {\n      if (i < currentNotebook) return currentNotebook - 1\n      if (i > currentNotebook) return currentNotebook\n      if (notebookList.length === 1) return NaN\n      if (i === 0) return i\n      return i - 1\n    }\n    \n    const newIndex : number = nearestValidIndex(index)\n    \n    if (Number.isNaN(newIndex)) return\n\n    notebookList.splice(index, 1)\n    this.setState({ notebookList, currentNotebook : newIndex })\n  }\n\n  updateSettings (newSettings : GlobalSettings) : void {\n    const { currentNotebook, notebookList } = this.state\n    notebookList[currentNotebook].settings = newSettings\n\n    this.setState({ notebookList })\n    updateSettingsInStorage(newSettings)\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}